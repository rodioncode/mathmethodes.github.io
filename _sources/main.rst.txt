============
Методическое пособие
============

:Date:   2020

.. raw:: latex

   \pagecolor{pk}

.. raw:: latex

   \afterpage{\nopagecolor}

.. raw:: latex

   \center

| НАЦИОНАЛЬНЫЙ ИССЛЕДОВАТЕЛЬСКИЙ УНИВЕРСИТЕТ ИТМО
| Факультет среднего профессионального образования
| Математические методы
| Учебно-методическое пособие

--------------

| 
| МАТЕМАТИЧЕСКОЕ МОДЕЛИРОВАНИЕ

--------------

| 

.. raw:: latex

   \large

| *Авторы*
| Дубанов Р.Ю.
| Лаптева Е.С.
| Янкин Г.А.
| Алексеев Д.Д.
| Корнетова М.А
| Кагазежев Б.М

 

.. raw:: latex

   \large

| *Руководитель*
| Пантюхин И.С.

.. raw:: latex

   \vfill

.. raw:: latex

   \vfill

.. raw:: latex

   \vfill 
       {\large\today}

.. raw:: latex

   \vfill 

.. raw:: latex

   \tableofcontents

.. raw:: latex

   \newpage

Графический метод решения задач линейного программирования
==========================================================

Теоретические основы решения задач линейного программирования графическим методом
---------------------------------------------------------------------------------

Основные понятия и определения линейного программирования
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Линейное программирование (ЛП) – раздел математического
программирования, в котором изучаются методы решения задач на нахождение
экстремальных (наибольших и наименьших) значений линейной функции
конечного числа переменных, на неизвестные которой наложены линейные
ограничения.

Линейная функция называется целевой, а ограничения, которые представляют
количественные соотношения между переменными, выражающие условия и
требования экономической задачи и математически записываются в виде
уравнений или неравенств, называются системой ограничений.

С помощью задач линейного программирования решается широкий круг
вопросов планирования экономических процессов, где ставится цель поиска
наилучшего решения. В качестве целевой функции могут рассматриваться,
например, прибыль от реализации (должна быть максимальной) или издержки
производства (должны быть минимальными).

Математическое выражение целевой функции и ее ограничений называется
математической моделью экономической задачи и записывается в общем виде
как

L(\ :math:`{\overline{x}}`)=\ :math:`{c_1x_1+c_2x_2+...+c_{ij}x_{ij}+...+c_nx_n}`\ :math:`\rightarrow{max(min)}`

при ограничениях:

.. math::

   \begin{cases}
              $ ${a_{11}x_1+a_{12}x_2+...+a_{1j}x_j+...+a_{1n}x_n=b_1}$,$\\
              $ ${a_{21}x_1+a_{22}x_2+...+a_{2j}x_j+...+a_{2n}x_n=b_2}$,$\\
              $ .......................................................................,$\\
              $ ${a_{i1}x_1+a_{i2}x_2+...+a_{ij}x_j+...+a_{in}x_n=b_i}$,$\\
              $ .......................................................................,$\\
              $ ${a_{m1}x_1+a_{m2}x_2+...+a_{mj}x_j+...+a_{mn}x_n=b_m}$,$\\[0.4cm]
           \end{cases}

 

| :math:`x_j{\geq}0`; :math:`{\qquad}` i=\ :math:`{\overline{1,m}}`;
  :math:`{\qquad}` j=\ :math:`{\overline{1,n}}`,

где :math:`x_j` — неизвестные; :math:`a_{ij}`, :math:`b_i`, :math:`c_j`
— заданные постоянные величины. Все или некоторые уравнения системы
ограничений могут быть записаны также в виде неравенств. Математическая
модель в более краткой записи имеет вид:

| L(\ :math:`{\overline{x}}`)=\ :math:`{ \sum_{j=1}^n c_{j}x_{j} }`\ :math:`\rightarrow{max(min)}`

при ограничениях:

| :math:`{ \sum_{j=1}^n a_{ij}x_{j}}`\ =\ :math:`b_{i}`

Совокупность значений неизвестных (:math:`x_1`, :math:`x_2`, ...,
:math:`x_n`), удовлетворяющих системе ограничений, называется допустимым
решением, или планом задачи линейного программирования, а ограничения
определяют область допустимых решений (ОДР). Допустимое решение задачи
линейного программирования называется оптимальным, если оно обеспечивает
максимальное (минимальное) значение целевой функции.

Если все ограничения заданы уравнениями и переменные\ :math:`x_j`
неотрицательные, то модель называется канонической. Если хотя бы одно
ограничение является неравенством, то модель называется неканонической.

| Для составления математической модели необходимо:
| 1) Обозначить переменные.
| 2) Составить целевую функцию исходя из цели задачи.
| 3) Записать систему ограничений, учитывая имеющие в условии задачи
  показатели и их количественные закономерности.

Теоретические основы графического метода решения задач линейного программирования
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Наиболее простым и наглядным методом решения задач линейного
программирования является графический метод. Он применяется для задач
линейного программирования с двумя переменными, когда ограничения
выражены неравенствами, и задач со многими переменными при условии, что
в их канонической записи содержится не более двух свободных переменных.

Графический метод основан на геометрическом представлении допустимых
решений и целевой функции задачи. Каждое из неравенств задачи линейного
программирования определяет на координатной плоскости (:math:`x_1`,
:math:`x_2`) некоторую полуплоскость. Пересечение этих полуплоскостей
задает область допустимых решений (ОДР), то есть любая точка из этой
области является решением системы ограничений.

В общем случае область допустимых решений может быть представлена одной
из следующих фигур: выпуклым многоугольником, неограниченной
многоугольной областью, лучом, отрезком, точкой или пустой областью. В
последнем случае говорят, что ограничения не совместны. Если система
ограничений включает равенства, то они определяют на координатной
плоскости (:math:`x_1`, :math:`x_2`) прямую линию. Область допустимых
решений всегда представляет собой выпуклую фигуру.

|image|

С геометрической точки зрения в задаче линейного программирования ищется
такая угловая точка или набор точек из допустимого множества решений, на
которой достигается самая верхняя (нижняя) линия уровня, расположенная
дальше (ближе) остальных в направлении наискорейшего роста.

Целевая функция задачи линейного программирования при фиксированном
значении L определяет на плоскости прямую линию
L=\ :math:`{c_1x_1+c_2x_2}`. Изменяя значения L, получим семейство
параллельных прямых, называемых линиями уровня.

| Для нахождения экстремального значения целевой функции используют
  вектор :math:`{\overrightarrow{grad}}` L=\ :math:`{\overline{C}}` на
  плоскости :math:`X_1`\ O\ :math:`X_2`, который показывает направление
  наискорейшего изменения целевой функции, он равен:

| :math:`{\overrightarrow{grad}}`
  L=\ :math:`{\overline{C}}`\ =\ :math:`\frac{\partial L}{\partial x_1} \bar{e_1}`\ +\ :math:`\frac{\partial L}{\partial x_2} \bar{e_2}`,

где :math:`e_1` и :math:`e_2` — единичные векторы по осям О\ :math:`X_1`
и О\ :math:`X_2`. Таким образом,

| :math:`{\overline{C}}`\ =(\ :math:`\frac{\partial L}{\partial x_1}`,\ :math:`\frac{\partial L}{\partial x_2}`).

Координатами вектора :math:`{\overline{C}}` являются коэффициенты
целевой функции L(x).

Алгоритм решения задачи ЛП графическим методом
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:math:`{\qquad}`\ 1. Находим область допустимых решений системы
ограничений задачи.

Для этого каждое из неравенств системы заменяем равенством и строим
соответствующие этим равенствам граничные прямые. Каждая из построенных
прямых делит плоскость на две полуплоскости. Чтобы графически
определить, по какую сторону от граничной прямой располагается
полуплоскость, содержащая решения, удовлетворяющие рассматриваемому
неравенству, достаточно проверить одну какую-либо точку, не лежащую на
прямой (например (0,0)). Если при подстановке ее координат в левую часть
неравенства оно выполняется, то надо заштриховать полуплоскость,
содержащую данную точку. Если же неравенство не выполняется, надо
заштриховать полуплоскость, не содержащую данную точку. Отмечаем общую
область для всех неравенств. Таким образом, получим область допустимых
решений рассматриваемой задачи ЛП.

:math:`{\qquad}`\ 2. Формируем графическое изображение целевой функции.

Приравняем целевую функцию к постоянной величине L:
L=\ :math:`{c_1x_1+c_2x_2}`. Это уравнение при фиксированном значении L
определяет прямую, а при изменении L семейство параллельных прямых,
каждая из которых называется линией уровня. Проводим линию уровня
:math:`{L_0}`.

:math:`{\qquad}`\ 3. Определяем направление возрастания целевой функции
(вектор :math:`{\overline{C}}`).

Для определения направления максимального возрастания значения целевой
функции строим вектор-градиент целевой функции, который начинается в
точке (0,0), заканчивается в точке (:math:`{c_1x_1,c_2x_2}`). Если линия
уровня и вектор-градиент построены верно, то они будут перпендикулярны.

:math:`{\qquad}`\ 4. Находим оптимальное решение задачи ЛП.

Линию уровня перемещаем по направлению вектора :math:`{\overline{C}}`
для задач на максимум и в направлении, противоположном
:math:`{\overline{C}}`, для задач на минимум. Перемещение линии уровня
производится до тех пор, пока у нее окажется только одна общая точка с
областью допустимых решений (ОДР). Эта точка определяет единственное
решение задачи ЛП и будет точкой экстремума. Если окажется, что линия
уровня параллельна одной из сторон ОДР, то задача ЛП будет иметь
бесчисленное множество решений. Если ОДР представляет неограниченную
область, то целевая функция может быть неограниченна. Задача ЛП может
быть неразрешима, когда определяющие ее ограничения окажутся
противоречивыми.

:math:`{\qquad}`\ 5. Находим координаты точки экстремума и значение
целевой функции в этой точке.

Для вычисления координат оптимальной точки решим систему уравнений
прямых, на пересечении которых находится эта точка. Подставляя найденный
результат в целевую функцию, получим искомое оптимальное значение
целевой функции.

|image|

Практическое применение графического метода решения задач линейного программирования
------------------------------------------------------------------------------------

Пример решения задач линейного программирования графическим методом
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Пример:** Найти наибольшее значение функции L=\ :math:`{x_1+x_2}` при
ограничениях:

.. math::

   \begin{cases}
              $ ${x_1+3x_2}$ $\leq$ 6,$\\
              $ ${2x_1+x_2}$ $\leq$ 8,$\\
           \end{cases}

 

:math:`x_1 \geq 0` :math:`\qquad` :math:`x_2 \geq 0`.

**Решение:** 1) Рассмотрим первое неравенство системы ограничений.

:math:`{x_1+3x_2}` :math:`\leq` 6

Построим прямую: :math:`{x_1+3x_2}`\ =6.

|image|

2) Рассмотрим второе неравенство системы ограничений.

:math:`{2x_1+x_2}` :math:`\leq` 8

Построим прямую: :math:`{2x_1+x_2}`\ =8.

|image|

3) Строим вектор :math:`{\overline{C}}`\ (1;1), координатами которого
являются коэффициенты функции L.

4) Перемещаем линию уровня (красную прямую), перпендикулярно данному
вектору, от левого нижнего угла к правому верхнему.

В точке, в которой линия уровня в первый раз пересечет область
допустимых решений, функция L достигает своего наименьшего значения.

|image|

В точке, в которой линия уровня в последний раз пересечет область
допустимых решений, функция L достигает своего наибольшего значения.

Функция L достигает наибольшего значения в точке A.

Точка A одновременно принадлежит прямым (1) и (2). Составим систему
уравнений:

.. math::

   \begin{cases}
              $ ${x_1+3x_2}$=6,$\\
              $ ${2x_1+x_2}$=8,$\\
           \end{cases}

 

| :math:`{x_1}=\frac{18}{5}`
| :math:`{x_2}=\frac{4}{5}`

Вычислим значение функции L в точке
A(\ :math:`\frac{18}{5};\frac{4}{5}`).

L(A) = 1\*\ :math:`\frac{18}{5}` +
1\*\ :math:`\frac{4}{5}`\ =\ :math:`\frac{22}{5}`.

**Ответ:** :math:`{x_1}=\frac{18}{5}`; :math:`{x_2}=\frac{4}{5}`;
:math:`{L_{max}}=\frac{22}{5}`.

.. raw:: latex

   \newpage

Симплекс метод
==============

Введение дополнительных переменных в систему ограничений
--------------------------------------------------------

В предыдущем параграфе для решения ОЗЛП был применен графический метод.
В общем случае ОЗЛП решается с помощью симплекс-метода, к изложению
которого мы сейчас и переходим.

Рассмотрим ОЗЛП с системой ограничений в следующей форме:

.. math::

   \begin{cases}
              $ ${a_{11}x_1+a_{12}x_2+...+a_{1n}x_n}\leq b_1$,$\\
              $ ${a_{21}x_1+a_{22}x_2+...+a_{2n}x_n}\leq b_2$,$\\
              $ ...................................................$\\
              $ ${a_{m1}x_1+a_{m2}x_2+...+a_{mn}x_n}\leq b_m$,$
           \end{cases}

 Если ввести в систему ограничений дополнительные переменные

:math:`x_{n+1}`, :math:`x_{n+2}`, ..., :math:`x_{n+m}`

по формулам

.. math::

   \begin{cases}
              $ $x_{n+1}$=$b_1-{a_{11}x_1+a_{12}x_2+...+a_{1n}x_n}$,$\\
              $ $x_{n+2}$=$b_2-{a_{21}x_1+a_{22}x_2+...+a_{2n}x_n}$,$\\
              $ ..............................................................$\\
              $ $x_{n+m}$=$b_m-{a_{m1}x_1+a_{m2}x_2+...+a_{mn}x_n}$,$\\
           \end{cases}

 то система ограничений преобразуется в систему уравнений

.. math::

   \begin{cases}
              $ ${a_{11}x_1+a_{12}x_2+...+a_{1n}x_n}=b_1$,$\\
              $ ${a_{21}x_1+a_{22}x_2+...+a_{2n}x_n}=b_2$,$\\
              $ ....................................................$\\
              $ ${a_{m1}x_1+a_{m2}x_2+...+a_{mn}x_n}=b_m$,$
           \end{cases}

 имеющую специальный вид. В этой системе каждая из переменных
:math:`x_{n+1}`, :math:`x_{n+2}`, ..., :math:`x_{n+m}` исключена из всех
уравнений, за исключением одного уравнения, в котором коэффициент при
ней равен 1.

Преобразование системы уравнений методом полных жордановых исключений
---------------------------------------------------------------------

Заметив, что мы ввели дополнительные переменные в систему ограничений
таким образом, что при любом допустимом плане они оказались
неотрицательными числами, перейдем к преобразованию системы уравнений с
помощью метода, который носит название метода полных жордановых
исключений.

Для системы уравнений назовем переменные :math:`x_1`, :math:`x_2`, ...,
:math:`x_n` свободными, а переменные :math:`x_{n+1}`, :math:`x_{n+2}`,
..., :math:`x_{n+m}` - базисными.

Разделение переменных на свободные и базисные является условным,
поскольку систему уравнений можно переписать в другом (эквивалентном)
виде, где наборы свободных и базисных переменных будут иными. В
частности, можно поменять ролями какую - нибудь свободную переменную
:math:`x_r` с некоторой базисной переменной. С этой целью совершим
следующие операции:

#. Рассмотрим какое-нибудь уравнение системы, в котором коэффициент
   :math:`a_{sr}` при переменной :math:`x_{r}` отличен от 0 (это
   уравнение с номером s).

#. Разделим это уравнение на :math:`a_{sr}`. Тогда в нем коэффициент при
   пере- менной :math:`x_{r}` станет равным 1.

#. | Вычтем из каждого i-го уравнения системы (i:math:`\ne`\ s)
     уравнение с номером s, умноженное на :math:`a_{sr}`.
   | В результате переменная :math:`x_{r}` будет исключена из всех
     уравнений системы, кроме уравнения с номером s, и станет базисной,
     а переменная :math:`x_{n+s}` станет свободной.

Описанный процесс носит название полного жорданова исключения с
разрешающим элементом :math:`a_{sr}`. Коэффициенты s-го уравнения
системы называются разрешающей строкой, а элементы r-го столбца матрицы
системы уравнений - разрешающим столбцом.

Удобный алгоритм пересчета коэффициентов системы уравнений при
проведении полного жорданова исключения с разрешающим элементом
:math:`a_{sr}` состоит в следующем (здесь и далее верхний индекс «н»
соответствует новому значению элемента матрицы, а верхний индекс «с» -
старому значению):

#. Разделим элементы разрешающей строки на разрешающий элемент. При этом
   разрешающий элемент станет равным 1;

#. Все элементы разрешающего столбца, за исключением разрешающего
   элемента, заменим нулями. При этом разрешающий элемент останется
   равным 1.

#. Все остальные элементы матрицы пересчитаем в новые элементы

:math:`a_{ij}^H`\ =\ :math:`\frac{a_{ij}^C \cdot a_{sr}^C-a_{sj}^C\cdot a_{ir}^C}{a_{sr}^C}`

воспользовавшись «правилом прямоугольника»

|image|

В случае, когда в разрешающей строке (разрешающем столбце) есть нули,
правило прямоугольника приводит к тому, что элементы столбцов (строк),
пересекающих эти нули, остаются без изменения.

Понятие опорного плана
----------------------

-  Базисным решением ОЗЛП называется такое решение системы уравнений, в
   котором все свободные переменные равны 0.

-  Базисное решение ОЗЛП называется опорным решением (опорным планом),
   если в нем все базисные переменные неотрицательны.

-  В теории симплекс-метода доказывается, что, если максимум целевой
   функции при данной в ОЗЛП системе ограничений существует, то он
   достигается на опорном решении.

-  Опорное решение, на котором целевая функция достигает максимума,
   является оптимальным планом.

Замечание. Не следует думать, что ОЗЛП всегда имеет решение. Система
ограничений, например, может быть противоречивой и задавать пустое
множество решений. Система ограничений может также задавать
неограниченное множество, на котором функция прибыли является
неограниченной.

Расчетный алгоритм симплекс-метода
----------------------------------

Алгоритм симплекс-метода состоит из нескольких этапов: сначала
происходит построение одного из опорных решений, а затем - «улучшение»
этого решения, т.е. переход к другим опорным решениям, на которых
значениецелевой функции не уменьшается. Для проведения расчетов
используются симплекс-таблицы, составленные по коэффициентам системы, а
процесс поиска и улучшения опорного решения заключается в пересчете
элементов этих таблиц методом полных жордановых исключений.

Первый этап алгоритма. Формирование симплекс-таблицы
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Составим первую симплекс-таблицу по системе и целевой функции.

.. raw:: latex

   \centering

+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     | :ma | ... | :ma | :ma | :ma | ... | :ma | :ma |
|     |     |     | th: |     | th: | th: | th: |     | th: | th: |
|     |     |     | `x_ |     | `x_ | `x_ | `x_ |     | `x_ | `\s |
|     |     |     | 2`  |     | n`  | {n+ | {n+ |     | {n+ | um` |
|     |     |     |     |     |     | 1}` | 2}` |     | m}` |     |
+=====+=====+=====+=====+=====+=====+=====+=====+=====+=====+=====+
| :ma | :ma | :ma | :ma | ... | :ma | 1   | 0   | ... | 0   |     |
| th: | th: | th: | th: |     | th: |     |     |     |     |     |
| `x_ | `b_ | `a_ | `a_ |     | `a_ |     |     |     |     |     |
| {n+ | 1`  | {11 | {12 |     | {1n |     |     |     |     |     |
| 1}` |     | }`  | }`  |     | }`  |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
| :ma | :ma | :ma | :ma | ... | :ma | 0   | 1   | ..  | 0   |     |
| th: | th: | th: | th: |     | th: |     |     |     |     |     |
| `x_ | `b_ | `a_ | `a_ |     | `a_ |     |     |     |     |     |
| {n+ | 2`  | {12 | {22 |     | {1n |     |     |     |     |     |
| 2}` |     | }`  | }`  |     | }`  |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
| ... | ..  | ... | ... | ... | ... | ... | ... | ... | ... |     |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
| :ma | :ma | :ma | :ma | ... | :ma | 0   | 0   | ... | 1   |     |
| th: | th: | th: | th: |     | th: |     |     |     |     |     |
| `x_ | `b_ | `a_ | `a_ |     | `a_ |     |     |     |     |     |
| {n+ | m`  | {m1 | {m2 |     | {mn |     |     |     |     |     |
| m}` |     | }`  | }`  |     | }`  |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
| z   | :ma | -:m | -:m | ... | -:m | 0   | 0   | ... | 0   |     |
|     | th: | ath | ath |     | ath |     |     |     |     |     |
|     | `c_ | :`c | :`c |     | :`c |     |     |     |     |     |
|     | 0`  | _1` | _2` |     | _n` |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
| :ma | :ma | :ma | :ma | ... | :ma | :ma | :ma | ... | :ma |     |
| th: | th: | th: | th: |     | th: | th: | th: |     | th: |     |
| `\p | `\p | `\p | `\p |     | `\p | `\p | `\p |     | `\p |     |
| hi` | hi_ | hi_ | hi_ |     | hi_ | hi_ | hi_ |     | hi_ |     |
|     | 0`  | 1`  | 2`  |     | n`  | {n+ | {n+ |     | {n+ |     |
|     |     |     |     |     |     | 1}` | 2}` |     | m}` |     |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+

Для каждого уравнения системы в первом столбце таблицы указывается
соответствующая базисная переменная. Строка z называется целевой
строкой. Строка :math:`\varphi` добавляется в таблицу лишь в случае
поиска опорного решения и называется фиктивной целевой строкой.
Последний столбец таблицы (столбец :math:`\Xi`) организован для контроля
правильности вычислений, и в каждой его клетке будем записывать суммы
чисел, стоящих в строке.

Таблице соответствует базисное решение системы вида

:math:`x_1`\ =\ :math:`x_2`\ =...=\ :math:`x_n`\ =0,
:math:`x_{n+1}`\ =\ :math:`b_1`, :math:`x_{n+2}`\ =\ :math:`b_2`, ...,
:math:`x_{n+m}`\ =\ :math:`b_m`.

Возможны два случая:

#. Все числа :math:`b_1`, :math:`b_2`, ..., :math:`b_m` неотрицательны,
   т.е. решение является опорным. В этом случае строку :math:`\varphi` в
   таблице не заводим и сразу переходим ко 2-му этапу.

#. Среди чисел :math:`b_1`, :math:`b_2`, ..., :math:`b_m` существуют
   отрицательные, т.е. решение не является опорным. Тогда для построения
   опорного решения запишем в строку :math:`\varphi` сумму тех строк
   таблицы, где стоят отрицательные значения :math:`b_i`, а затем
   перейдем к анализу и улучшению решения по фиктивной целевой строке
   :math:`\varphi`.

Второй этап алгоритма. Анализ решения по целевой (фиктивной целевой) строке симплекс-таблицы
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Рассмотрим элементы целевой (фиктивной целевой) строки, стоящие в
столбцах :math:`x_1`, ..., :math:`x_{n+m}`. Если среди них имеется хотя
бы один отрицательный элемент, то решение надо улучшать по правилам
этапа 3.

Если же все указанные элементы неотрицательны, то в случае, когда
анализируется опорное решение по целевой строке z, это означает, что на
этом решении функция z достигает максимума и нужно переходить к
выписыванию соответствующего оптимального плана (этап 4).

В случае поиска опорного решения (анализ по фиктивной целевой строке
:math:`\varphi`) вся строка :math:`\varphi` должна состоять из нулей,
иначе система ограничений противоречива, и ОЗЛП не имеет решения.
Получение же нулевой строки :math:`\varphi` свидетельствует о том, что
опорное решение построено. В этом случае фиктивная целевая строка
удаляется из таблицы, а решение анализируется по целевой строке z.

Третий этап алгоритма. Улучшение решения по целевой (фиктивной целевой) строке симплекс-таблицы
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Найдем среди элементов :math:`z_1`, :math:`z_2`, ..., :math:`z_n`
   целевой строки z (или среди элементов :math:`\phi_1`, :math:`\phi_2`,
   ..., :math:`\phi_n` в случае фиктивной целевой строки :math:`\phi`)
   наибольший по абсолютной величине отрицательный элемент. Пусть это
   будет элемент :math:`z_r` (или :math:`\phi_r`), тогда столбец
   :math:`x_r` объявим разрешающим.

#. Найдем среди дробей вида :math:`\frac{b_i}{a_{ir}}` (i=1,2,..., m)
   наименьшую неотрицательную дробь (пусть это будет дробь
   :math:`\frac{b_s}{a_{sr}}`), и объявим строку :math:`x_{n+s}`
   разрешающей. Если же все дроби вида :math:`\frac{b_i}{a_{ir}}`
   окажутся отрицательными, то это означает, что при заданной системе
   ограничений функция z неограничена,т.е. поставленная ОЗЛП решений не
   имеет.

#. Элемент :math:`a_{sr}`, стоящий на пересечении разрешающей строки и
   разрешающего столбца, объявим разрешающим, и, для наглядности, его
   можно обвести в таблице прямоугольником.

   Замечание. Иногда существует несколько возможностей выбора
   разрешающего элемента. В этом случае для поиска опорного решения
   разрешающий элемент выбирают отрицательным.

#. Заготовим новую симплекс-таблицу, заменив в первом столбце переменную
   :math:`x_{n+s}` на переменную :math:`x_r`.

#. Пересчитаем все элементы старой симплекс-таблицы, включая строки z и
   :math:`\phi`, а также столбец :math:`\sum`, по правилам метода полных
   жордановых исключений с разрешающим элементом :math:`a_{sr}`.
   Результат запишем в новую симплекс-таблицу.

   Контроль правильности вычислений осуществляем при помощи сравнений
   сумм элементов каждой строки с числами, записанными в последнем
   столбце :math:`\sum`. Расхождение результатов свидетельствует об
   арифметической ошибке, и соответствующую строку надо пересчитать.

   После этого возвращаемся к этапу 2.

Четвертый этап алгоритма. Запись оптимального плана
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

В плане указываем значения только исходных переменных :math:`x_1`,
:math:`x_2`, ..., :math:`x_n`, причем значения тех из них, которые
являются свободными, полагаем равными нулю, а значения остальных
переменных берем из второго столбца таблицы (столбца свободных членов).
Из этого же столбца выписываем максимальное значение z.

Практическое применение симплекс-метода
---------------------------------------

Пример решения типовой задачи с помощью симплекс-метода
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Задача:** Составляется комбинированный корм из трех злаков: кукурузы,
овса и ржи. Калорийность и содержание витамина С в одном кг каждого
злака, а также цена одного кг каждого злака указаны в следующей таблице
1:

| *Таблица 1*

.. raw:: latex

   \centering

+---------------+-----+-----+------+
|               |     |     | Рожь |
+===============+=====+=====+======+
| Ккал          | 200 | 175 | 100  |
+---------------+-----+-----+------+
| Витамин С (г) | 5   | 1   | 3    |
+---------------+-----+-----+------+
| Цена (руб.)   | 6   | 4   | 1    |
+---------------+-----+-----+------+

Требуется составить наиболее дешевый комбинированный корм, 1кг которого
содержал бы не менее 125 ккал и не менее 2 г витамина С. **Решение:**
Обозначим содержание кукурузы, овса и ржи в 1кг комбикорма символами
:math:`x_1`, :math:`x_2` и :math:`x_3` (кг), соответственно. По условию
задачи эти переменные удовлетворяют следующей системе ограничений:

.. math::

   \begin{cases}
               $ $x_1$+$x_2$+$x_3$=1, $\\
               $ 200$x_1$+175$x_2$+100$x_3 \geq$125,  $\\
               $ 5$x_1$+$x_2$+3$x_3 \geq$2,  $\\
               $ $x_1 \geq 0$, $x_2 \geq 0$ и $x_3 \geq 0$  $\\
           \end{cases}

 Требуется найти план, доставляющий минимум функции затрат

R=6\ :math:`x_1`\ +4\ :math:`x_2`\ +\ :math:`x_3 \to` min.

Решим поставленную задачу с помощью симплекс-метода. Для этого перепишем
систему ограничений в следующем виде:

.. math::

   \begin{cases}
               $ $x_1$+$x_2$+$x_3$=1, $\\
               $ -8$x_1$-7$x_2$-4$x_3 \leq$-5,  $\\
               $ -5$x_1$-$x_2$-3$x_3 \leq$-2  $\\
           \end{cases}

 Введя дополнительные переменные :math:`x_4` и :math:`x_5`, преобразуем
систему в систему уравнений

.. math::

   \begin{cases}
               $ $x_1$+$x_2$+$x_3$=1, $\\
               $ -8$x_1$-7$x_2$-4$x_3 =$-5,  $\\
               $ -5$x_1$-$x_2$-3$x_3 =$-2  $\\
           \end{cases}

 Приведем систему к специальному виду, исключив переменную :math:`x_3`
из второго и третьего уравнений:

.. math::

   \begin{cases}
               $ $x_1$+$x_2$+$x_3$=1, $\\
               $ -4$x_1$-3$x_2$+$x_4=$-1,  $\\
               $ -2$x_1$+2$x_2$+$x_5=$1  $\\
           \end{cases}

 Будем искать решение, доставляющее максимум функции прибыли

z=-6\ :math:`x_1`-4:math:`x_2`-:math:`x_3`\ =-1-5\ :math:`x_1`-3:math:`x_2 \to`\ max.

Составим первую симплекс-таблицу (Таблица 2).

| *Таблица 2*

.. raw:: latex

   \centering

+--------------+----+----+-------------+-------------+-------------+-------------+--------------+
|              |    |    | :math:`x_2` | :math:`x_3` | :math:`x_4` | :math:`x_5` | :math:`\sum` |
+==============+====+====+=============+=============+=============+=============+==============+
| :math:`x_3`  | 1  | 1  | 1           | 1           | 0           | 0           | 4            |
+--------------+----+----+-------------+-------------+-------------+-------------+--------------+
| :math:`x_4`  | -1 | -4 | -3          | 0           | 1           | 0           | -7           |
+--------------+----+----+-------------+-------------+-------------+-------------+--------------+
| :math:`x_5`  | 1  | -2 | 2           | 0           | 0           | 1           | 2            |
+--------------+----+----+-------------+-------------+-------------+-------------+--------------+
| z            | -1 | 5  | 3           | 0           | 0           | 0           | 7            |
+--------------+----+----+-------------+-------------+-------------+-------------+--------------+
| :math:`\phi` | -1 | -4 | -3          | 0           | 1           | 0           | -7           |
+--------------+----+----+-------------+-------------+-------------+-------------+--------------+

Поскольку базисное решение

:math:`x_1`\ =\ :math:`x_2`\ =0, :math:`x_3`\ =1, :math:`x_4`\ =-1,
:math:`x_5`\ =1

не является опорным (:math:`x_4`\ <0), то для поиска опорного решения в
симплекстаблицу добавляется фиктивная целевая строка :math:`\phi`, в
которую записывается строка :math:`x_4`.

В столбец :math:`\sum` запишем суммы чисел, стоящие по строкам таблицы.

В строке :math:`\phi` среди чисел -4, -3, 0, 1, 0 наибольшим по
абсолютной величине отрицательным числом является число -4, поэтому
разрешающим столбцом объявляем столбец :math:`x_1`. Для элементов
таблицы, расположенных в строках :math:`x_3`, :math:`x_4` и :math:`x_5`,
рассмотрим дроби

:math:`\frac{1}{1}`\ =1, :math:`\frac{-1}{-4}`\ =0,25 и
:math:`\frac{1}{-2}`\ =-0,5

числители которых являются элементами второго столбца таблицы, а
знаменатели - элементами разрешающего столбца. Наименьшей
неотрицательной дробью является дробь 0,25, поэтому строка :math:`x_4`
объявляется разрешающей строкой. Таким образом, элемент таблицы, стоящий
на пересечении строки :math:`x_4` и столбца :math:`x_1` (число -4)
является разрешающим элементом.

Теперь пересчитаем все элементы Таблицы 2 по правилам метода полных
жордановых исключений с разрешающим элементом -4. Получим следующую
Таблицу 3:

| *Таблица 3*

.. raw:: latex

   \centering

+--------+--------+--------+--------+--------+--------+--------+--------+
|        |        |        | :math: | :math: | :math: | :math: | :math: |
|        |        |        | `x_2`  | `x_3`  | `x_4`  | `x_5`  | `\sum` |
+========+========+========+========+========+========+========+========+
| :math: | 0,75   | 0      | 0,25   | 1      | 0,25   | 0      | 2,25   |
| `x_3`  |        |        |        |        |        |        |        |
+--------+--------+--------+--------+--------+--------+--------+--------+
| :math: | 0,25   | 1      | 0,75   | 0      | -0,25  | 0      | 1,75   |
| `x_4`  |        |        |        |        |        |        |        |
+--------+--------+--------+--------+--------+--------+--------+--------+
| :math: | 1,5    | 0      | 3,5    | 0      | -0,5   | 1      | 5,5    |
| `x_5`  |        |        |        |        |        |        |        |
+--------+--------+--------+--------+--------+--------+--------+--------+
| z      | -2,25  | 0      | -0,75  | 0      | 1,25   | 0      | -1,75  |
+--------+--------+--------+--------+--------+--------+--------+--------+
| :math: | 0      | 0      | 0      | 0      | 0      | 0      | 0      |
| `\phi` |        |        |        |        |        |        |        |
+--------+--------+--------+--------+--------+--------+--------+--------+

Так как строка :math:`\phi` стала нулевой, то опорное решение получено.
Исключим строку :math:`\phi` из таблицы и проведем анализ по целевой
строке z.

Среди чисел 0; -0,75; 0; 1,25; 0 наибольшим по абсолютной величине
отрицательным числом является число -0,75, поэтому разрешающим столбцом
объявляем столбец :math:`x_2`. Для элементов таблицы, расположенных в
строках :math:`x_3`, :math:`x_1`, и :math:`x_5`, рассмотрим дроби

:math:`\frac{0,75}{0,25}`\ =3,
:math:`\frac{0,25}{0,75}`\ =\ :math:`\frac{1}{3}` и
:math:`\frac{1,5}{3,5}`\ =\ :math:`\frac{3}{7}`

числители которых являются элементами второго столбца таблицы, а
знаменатели - элементами разрешающего столбца. Наименьшей
неотрицательной дробью является дробь :math:`\frac{1}{3}`, поэтому
строка :math:`x_1` объявляется разрешающей строкой.

Таким образом, элемент таблицы, стоящий на пересечении строки
:math:`x_1` и столбца :math:`x_2` (число 0,75) является разрешающим
элементом.

Теперь пересчитаем все элементы Таблицы 3 в новую симплекс-таблицу по
правилам метода полных жордановых исключений с разрешающим элементом
0,75. Получим следующую Таблицу 4:

| *Таблица 4*

.. raw:: latex

   \centering

+--------+--------+--------+--------+--------+--------+--------+--------+
|        |        |        | :math: | :math: | :math: | :math: | :math: |
|        |        |        | `x_2`  | `x_3`  | `x_4`  | `x_5`  | `\sum` |
+========+========+========+========+========+========+========+========+
| :math: | :math: | -:math | 0      | 1      | :math: | 0      | :math: |
| `x_3`  | `\frac | :`\fra |        |        | `\frac |        | `\frac |
|        | {2}{3} | c{1}{3 |        |        | {1}{3} |        | {5}{3} |
|        | `      | }`     |        |        | `      |        | `      |
+--------+--------+--------+--------+--------+--------+--------+--------+
| :math: | :math: | :math: | 1      | 0      | -:math | 0      | :math: |
| `x_4`  | `\frac | `\frac |        |        | :`\fra |        | `\frac |
|        | {1}{3} | {4}{3} |        |        | c{1}{3 |        | {7}{3} |
|        | `      | `      |        |        | }`     |        | `      |
+--------+--------+--------+--------+--------+--------+--------+--------+
| :math: | :math: | -:math | 0      | 0      | :math: | 2      | -:math |
| `x_5`  | `\frac | :`\fra |        |        | `\frac |        | :`\fra |
|        | {2}{3} | c{28}{ |        |        | {4}{3} |        | c{16}{ |
|        | `      | 3}`    |        |        | `      |        | 3}`    |
+--------+--------+--------+--------+--------+--------+--------+--------+
| z      | -2     | 1      | 0      | 0      | 1      | 0      | 0      |
+--------+--------+--------+--------+--------+--------+--------+--------+

В строке z среди чисел 1; 0; 0; 1; 0 нет отрицательных. Значит, максимум
z достигнут, и можно выписать оптимальный план:

:math:`x_1`\ =0, :math:`x_2`\ =\ :math:`\frac{1}{3}`,
:math:`x_3`\ =\ :math:`\frac{2}{3}`

Максимальное значение целевой функции z равно -2, а минимальное значение
функции затрат R равно 2.

**Ответ:** Оптимальным является комбикорм, состоящий на
:math:`\frac{1}{3}` из овса и на :math:`\frac{2}{3}` изо ржи.

Транспортная задача
===================

Постановка транспортной задачи. Транспортная таблица
----------------------------------------------------

Транспортная задача - это математическая задача линейного
программирования специального вида о поиске оптимального распределения
однородных объектов с минимизацией затрат на перемещение.

Имеется :math:`{m}` поставщиков :math:`A_1`, :math:`A_2`, ...,
:math:`A_m`, у которых сосредоточены запасы одного и того же груза в
количестве :math:`a_1`, :math:`a_2`, ..., :math:`a_m` единиц,
соответственно. Этот груз нужно доставить :math:`{n}` потребителям
:math:`B_1`, :math:`B_2`, ..., :math:`B_n`, заказавшим :math:`b_1`,
:math:`b_2`, ..., :math:`b_n` единиц этого груза, соответственно.
Известны также все тарифы перевозок груза :math:`c_{ij}` (стоимость
перевозок единицы груза) от поставщика :math:`A_i` к потребителю
:math:`B_j`. Требуется составить такой план перевозок, при котором общая
стоимость всех перевозок была бы минимальной.

Условие транспортной задачи удобно записать в виде следующей
Транспортной таблицы 1.1.

*Транспортная таблица 1*

.. raw:: latex

   \centering

+-----------+-----------+-----------+-----------+-----------+-----------+
|           | :math:`B_ | :math:`B_ | ...       | :math:`B_ |           |
|           | 1`        | 2`        |           | n`        |           |
+-----------+-----------+-----------+-----------+-----------+-----------+
| .. raw::  | :math:`b_ | :math:`b_ | ...       | :math:`b_ |           |
| latex     | 1`        | 2`        |           | n`        |           |
|           |           |           |           |           |           |
|    \cline |           |           |           |           |           |
| {3-6}     |           |           |           |           |           |
+-----------+-----------+-----------+-----------+-----------+-----------+
|           |           |           |           |           |           |
+-----------+-----------+-----------+-----------+-----------+-----------+
| :math:`A_ | :math:`a_ | :math:`c_ | :math:`c_ | ...       | :math:`c_ |
| 1`        | 1`        | {11}`     | {12}`     |           | {1n}`     |
+-----------+-----------+-----------+-----------+-----------+-----------+
| :math:`A_ | :math:`a_ | :math:`c_ | :math:`c_ | ...       | :math:`c_ |
| 2`        | 2`        | {21}`     | {22}`     |           | {2n}`     |
+-----------+-----------+-----------+-----------+-----------+-----------+
| ...       | ...       | ...       | ...       | ...       | ...       |
+-----------+-----------+-----------+-----------+-----------+-----------+
| :math:`A_ | :math:`a_ | :math:`c_ | :math:`c_ | ...       | :math:`c_ |
| m`        | m`        | {m1}`     | {m2}`     |           | {mn}`     |
+-----------+-----------+-----------+-----------+-----------+-----------+

Обозначим суммарный запас груза у всех поставщиков символом a, а
суммарную потребность в грузе у всех потребителей – символом b.

Тогда

| a=\ :math:`{ \sum_{i=1}^m a_i}`, :math:`{\qquad}`
  b=\ :math:`{ \sum_{j=1}^n b_j}`.

:math:`{\qquad}`\ 1) Транспортная задача называется закрытой,если
a=b.Еслиже :math:`a \neq b`, то транспортная задача называется открытой.

Далее будет показано, что в случае закрытой задачи от поставщиков будут
вывезены все запасы груза, и все заявки потребителей будут удовле-
творены.

В случае открытой задачи при a<b весь груз будет вывезен, однако будут
недопоставки груза экономически невыгодным потребителям. При a>b ,
наоборот, будут удовлетворены все потребители, но часть груза останется
на складах экономически невыгодных поставщиков.

| :math:`{\qquad}`\ 2) Пусть :math:`x_{ij}` (:math:`x_{ij} \geq` 0) –
  количество груза, отправляемого поставщи- ком :math:`A_i` потребителю
  :math:`B_j`. Тогда суммарные затраты Z на перевозки будут вычисляться
  по формуле

| Z=\ :math:`{ \sum_{i=1}^m \sum_{j=1}^n c_{ij}x_{ij}}`.

:math:`{\qquad}`\ 3) Матрица X с неотрицательными элементами
:math:`x_{ij}` называется планом перевозок.

:math:`{\qquad}`\ 4) Функция Z называется целевой функцией.

Математическая формулировка транспортной задачи заключается в нахождении
плана перевозок X =\ :math:`x_{ij}`, который удовлетворяет системе
ограничений

.. math::

   \begin{cases}
               $ ${ \sum_{j=1}^n x_{ij}=a_i}$, i=1,2,...,m, $\\
               $ ${ \sum_{i=1}^m x_{ij}=b_j}$, j=1,2,...,n,  $\\
           \end{cases}

 и доставляет минимум целевой функции Z.

:math:`{\qquad}`\ 5) План перевозок, реализующий минимум целевой функции
Z, называется оптимальным.

Смысл первой группы равенств в системе ограничений (см. п.4) состоит в
том, что суммарное количество груза, отправленное всем потребителям каж-
дым поставщиком, равно запасу груза у этого поставщика. Вторая группа
ра- венств в системе ограничений (см. п.4) показывает, что суммарное
количество груза, полученное каждым потребителем от всех поставщиков,
равно заказу этого потребителя.

Сведение открытой транспортной задачи к закрытой
------------------------------------------------

Решение транспортной задачи начинается с выяснения вопроса о том,
является ли задача открытой или закрытой.

Если задача является открытой, то необходимо провести процедуру закрытия
задачи. С этой целью при a<b добавляем фиктивного поставщика
:math:`A'_{m+1}` с запасом груза :math:`a'_{m+1}=b-a`. Если же a>b, то
добавляем фиктивного потребителя :math:`B'_{n+1}` с заказом груза
:math:`b'_{n+1}=a-b`.

В обоих случаях соответствующие фиктивным объектам тарифы перевозок
:math:`c'_{ij}` полагаем равными нулю. В результате суммарная стоимость
перевозок Z не изменяется.

Первоначальный план перевозок
-----------------------------

Транспортная задача относится к задачам линейного программирования, и ее
можно было бы решить симплекс-методом. Но поскольку система огра-
ничений транспортной задачи проще, чем система ограничений ОЗЛП, то это
дает возможность вместо использования объемных симплекс-таблиц применить
более удобный метод, который состоит из следующих этапов:

:math:`{\qquad}`\ 1. Составление первоначального плана перевозок.

:math:`{\qquad}`\ 2. Последовательные улучшения плана перевозок
(перераспределение поставок) до тех пор, пока план перевозок не станет
оптимальным.

Решение ОЗЛП начинается с нахождения опорного плана. Для транспортной
задачи такой план всегда существует. Опишем два метода составле- ния
опорного плана (первоначального плана перевозок). При этом
ненулевыеэлементы :math:`x_{ij}` плана перевозок будем записывать в
соответствующие пустые клетки транспортной таблицы с исходными данными
задачи, а символом (i, j) будем обозначать клетку таблицы, содержащую
информацию о перевозках груза от поставщика :math:`A_i` к потребителю
:math:`B_j`.

Составление первоначального плана перевозок с помощью метода северо-западного угла
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Составление первоначального плана перевозок начнем с перевозки запасов
поставщика :math:`A_1`. Будем за счет его запасов максимально возможно
удовлетворять заказы сначала потребителя :math:`B_1`, затем :math:`B_2`
и так далее. Таким образом, мы будем заполнять таблицу, начиная с клетки
(1,1), и двигаться вправо по строке до тех пор, пока остаток запасов
поставщика :math:`A_1` не окажется меньше заказа очередного потребителя.
Для выполнения этого заказа используем остатки запаса первого
поставщика, а недостающую часть добавим из запасов поставщика
:math:`A_2`, то есть переместимся на следующую строку таблицы по
столбцу, соответствующему указанному потребителю. Далее аналогичным
образом распределим запасы поставщика :math:`A_2`, затем :math:`A_3` и
так далее.

Проиллюстрируем это на следующем примере (Таблица 2).

| *Транспортная таблица 2*

| |image|

Распределяя запасы поставщика :math:`A_1` сначала потребителю
:math:`B_1`, а затем :math:`B_2`, получаем: :math:`x_{11}`\ =100,
:math:`x_{12}`\ =40. После этого у поставщика :math:`A_1` остается еще
20 единиц груза, а потребителю :math:`B_3` нужно 80 единиц. Удовлетворим
спрос поребителя :math:`B_3`, отправив ему 20 единиц груза, оставшихся у
поставщика :math:`A_1`, 30 единиц груза от поставщика :math:`A_2` и 30
единиц груза от :math:`A_3`. Следовательно,

:math:`x_{13}`\ =20, :math:`x_{23}`\ =30 и :math:`x_{33}`\ =30, 

причем у поставщика :math:`A_3` остается 60 последних единиц груза. Этот
груз и отправим потребителю :math:`B_4`. Таким образом
:math:`x_{34}`\ =60, все запасы груза вывезены и все потребители
удовлетворены.

Теперь мы можем подсчитать общую стоимость всех перевозок по данному
плану:

Z=4\ :math:`\cdot`\ 100+8\ :math:`\cdot`\ 40+10\ :math:`\cdot`\ 20+2\ :math:`\cdot`\ 30+6\ :math:`\cdot`\ 30+5\ :math:`\cdot`\ 60=1460.

Изложенный метод северо-западного угла прост в реализации, однако трудно
надеяться, что он даст экономичный первоначальный план, поскольку при
распределении перевозок мы совершенно не учитывали их стоимость.

Составление первоначального плана перевозок с помощью метода наименьшей стоимости
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Построение плана начнем с клетки с наименьшим тарифом перевозок. При
наличии нескольких клеток с одинаковыми тарифами выберем любую из них.
Пусть это будет клетка (i, j) . Запишем в эту клетку элемент
:math:`x_{ij}`\ =min(\ :math:`a_i`,\ :math:`b_j`). Если
:math:`a_i`\ <:math:`b_j`, то запасы поставщика :math:`A_i` исчерпаны, а
потребителю :math:`B_j` требуется еще :math:`b'_j=b_j-a_i` единиц груза.
Поэтому, не принимая более во внимание i-ю строку, снова ищем клетку с
наименьшей стоимостью перевозок и заполняем ее с учетом изменившихся
потребностей. В случае :math:`a_i`>\ :math:`b_j` из рассмотрения
исключается j-й столбец, а запасы :math:`A_i` полагаются равными
:math:`a'_i=a_i-b_j`. Продолжаем этот процесс до тех пор, пока все
запасы не будут исчерпаны, а все потребности удовлетворены.

Необходимо отметить, что при наличии в таблице клеток с одинаковыми
тарифами, планы, полученные с помощью этого метода, могут быть разными,
однако они, несомненно, ближе к оптимальному плану, чем план,
составленный по методу северо-западного угла.

Сформируем теперь первоначальный план по методу наименьшей стоимости для
рассмотренного в параграфе 2.3.1 примера и сравним результаты (Таблица
3). Поскольку наименьший тариф (число 2) стоит в клетке (2,3), то
запишем в эту клетку элемент :math:`x_{23}`\ =30. Тогда
:math:`b'_3`\ =50, а 2-ю строку таблицы можно больше не учитывать. Среди
оставшихся клеток имеются три клетки с наименьшим тарифом перевозок,
равным 4: (1,1); (3,1) и (3,2). Выберем, например, клетку (1,1) и
запишем в нее число :math:`x_{11}`\ =100. Получаем, что
:math:`a'_1`\ =60, а 1-й столбец таблицы больше не рассматриваем. Теперь
наименьший тариф, равный 4, проставлен в клетке (3,2), поэтому
:math:`x_{32}`\ =40, :math:`b'_3`\ =50 и 2-й столбец больше не нужен.
Далее выбираем клетку (1,4) с тарифом 5 и пишем в нее
:math:`x_{14}`\ =60. Исключив из рассмотрения сразу 1-ю строку и 4-ый
столбец (поскольку :math:`a'_1`\ =\ :math:`b_4`\ = 60), переходим к
последней клетке (3,3), в ко- торую записываем перевозку
:math:`x_{33}`\ =50.

| *Транспортная таблица 3*

| |image|

Найдем суммарную стоимость перевозок по этому плану:

Z=4\ :math:`\cdot`\ 100+5\ :math:`\cdot`\ 60+2\ :math:`\cdot`\ 30+4\ :math:`\cdot`\ 40+6\ :math:`\cdot`\ 50=1220.

Сравнивая это значение со стоимостью плана, полученного по методу
северо-западного угла, видим, что 1220<1460, то есть мы получили более
выгодный план перевозок.

Вырожденные планы. Циклы и пополнение плана
-------------------------------------------

Прежде, чем перейти к анализу оптимальности планов и способам их
улучшения, выясним, каким требованиям должны удовлетворять составляемые
планы. Для этого вернемся к системе ограничений

.. math::

   \begin{cases}
               $ ${ \sum_{j=1}^n x_{ij}=a_i}$, i=1,2,...,m, $\\
               $ ${ \sum_{i=1}^m x_{ij}=b_j}$, j=1,2,...,n,  $\\
           \end{cases}

 В соответствии с определением плана перевозок у матрицы
X=\ :math:`x_{ij}` сумма элементов i-й строки равняется :math:`a_i`,
i=1,2,...,m, а сумма элементов j-о столбца равняется :math:`b_j` ,
j=1,2,...,n. Условие закрытости транспортной задачи a=b означает, что
среди m+n уравнений системы независимыми являются только m+n-1
уравнений, поэтому в любом базисном решении этой системы должно быть
m+n-1 базисных переменных. Поскольку свободные переменные в таком
решении равны нулю, то в транспортной таблице им будут соответствовать
пустые клетки.

-  Клетки таблицы, в которые записаны отличные от нуля перевозки,
   называются базисными, а остальные (пустые) - свободными;

-  План называется вырожденным, если количество базисных клеток в нем
   меньше, чем m+n-1. Если на каком-то этапе решения получился
   вырожденный план, то его необходимо пополнить, проставив в
   недостающем числе клеток нулевую перевозку и превратив, тем самым,
   эти клетки в базисные. Общий баланс и суммарная стоимость перевозок
   плана при этом не изменятся. Однако проводить пополнение плана,
   выбирая клетки произвольно, нельзя. Приведем условия, которым должен
   соответствовать пополненный план.

-  Циклом в транспортной таблице называется несколько клеток,
   соединенных замкнутой ломаной линией так, чтобы две соседние вершины
   ломаной были расположены либо в одной строке, либо в одном столбце.
   Ломаная линия может иметь точки самопересечения, но не в клетках
   цикла.

-  План называется ациклическим, если его базисные клетки не содержат
   циклов. Доказано, что оптимальные планы являются ациклическими,
   поэтому и первоначальный план также должен удовлетворять этому
   требованию. Заметим, что планы, полученные с помощью метода
   северо-западного угла и метода наименьшей стоимости, ациклические.
   Однако если план оказался вырожденным, то при его пополнении
   требование ацикличности необходимо учитывать.

| Возвращаясь к рассматриваемому примеру, видим, что первоначальный
  план, полученный по методу наименьшей стоимости, имеет 5 базисных кле-
  ток, однако m+n-1=3+4-1=6. Значит, план нужно пополнить еще одной
  базисной клеткой. Попробуем выбрать для этого клетку (2,2). Соединив
  базисные клетки горизонтальными и вертикальными отрезками, получаем:

|image|

| Видим, что пополненный таким образом план содержит цикл из клеток
  (2,2); (2,3); (3,3) и (3,2), следовательно, клетка (2,2) была выбрана
  неудачно. Взяв вместо нее клетку (2,4), получим ациклический план.
  Поэтому можно заполнить эту клетку, положив :math:`x_{24}`\ =0.

|image|

Проверка оптимальности плана и перераспределение поставок с помощью метода потенциалов
--------------------------------------------------------------------------------------

Для анализа полученных планов и их последующего улучшения удобно ввести
дополнительные характеристики пунктов отправления и назначения,
называемые потенциалами.

Вычисление потенциалов
~~~~~~~~~~~~~~~~~~~~~~

Сопоставим каждому поставщику :math:`A_i` и каждому потребителю
:math:`B_j` величины :math:`u_i` и :math:`v_j` соответственно так, чтобы
для всех базисных клеток плана были выполнены соотношения

:math:`u_i`\ +\ :math:`v_j`\ =\ :math:`c_{ij}`, i=1,2,...,m,
j=1,2,...,n.

Поскольку число базисных клеток в плане равно m+n-1 (вырожденные планы
должны быть предварительно пополнены), то для определения потенциалов
получается система из m+n-1 уравнений с m+n неизвестными. Такая система
имеет бесконечное множество решений. Нам требуется любое ее решение.
Обычно для простоты полагают один из потенциалов равным нулю и затем
вычисляют остальные. В транспортной таблице для потенциалов :math:`v_1`,
:math:`v_2`, ..., :math:`v_n` заводится дополнительные строка, а для
потенциалов :math:`u_1`, :math:`u_2`, ..., :math:`u_n` – дополнительный
столбец, куда проставляются найденные значения.

Проверка оптимальности плана
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Для каждой свободной клетки плана вычислим разности
:math:`\Delta c_{ij}`\ =\ :math:`c_{ij}`-(:math:`u_i`\ +\ :math:`v_j`) и
запишем полученные значения в левых нижних углах соответствующих клеток.
Заметим, что для базисных клеток выполнено соотношение
:math:`\Delta c_{ij}`\ =0, и этим фактом можно пользоваться для контроля
правильности нахождения потенциалов.

План является оптимальным, если все разности
:math:`\Delta c_{ij} \geq 0`.

В противном случае план можно улучшить следующим способом.

Перераспределение поставок
~~~~~~~~~~~~~~~~~~~~~~~~~~

Найдем клетку с наибольшей по абсолютной величине отрицательной
разностью :math:`\Delta c_{ij}` и построим цикл, в котором кроме этой
клетки все остальные являются базисными. Такой цикл всегда существует и
единственен.

Заметим, что в новом плане суммы элементов по строкам и столбцам должны
остаться прежними, поэтому изменение значения в одной клетке цикла
повлечет за собой соответствующие изменения значений во всех остальных
клетках этого цикла. Так как в свободной клетке значение будет
увеличено, то проставим в ее правом нижнем углу знак :math:`\oplus`.
Теперь пройдем по всей ломаной цикла, проставляя в правых нижних углах
клеток поочередно знаки :math:`\oplus` и :math:`\ominus`.

Груз будет перераспределен по клеткам цикла на величину
:math:`\Delta x`\ =min\ :math:`x_{ij}` следующим образом. В клетках со
знаком «плюс» значение перевозки нужно увеличить на величину
:math:`\Delta x`, а в клетках со знаком «минус» – уменьшить на величину
:math:`\Delta x`. Так как после пересчета у нас добавилась лишняя
базисная клетка, то их количество необходимо сократить, убрав нуль в
одной из клеток цикла. Если таких клеток получилось несколько, то
свободной делаем ту из них, в которой тариф перевозок максимален.

После этого полученный план проверяется на оптимальность описанным выше
способом. Перераспределение груза производится до тех пор, пока
очередной план не станет оптимальным. На этом действие алгоритма
завершается.

Покажем, как нужно пользоваться методом потенциалов, на примере
первоначального плана, полученного выше по методу северо-западного угла.

| Вначале проверим, не является ли этот план вырожденным. Так как
  m+n-1=3+4-1=6, и число базисных клеток в плане также равно 6, то план
  в пополнении не нуждается. Найдем потенциалы по базисным клеткам
  таблицы с помощью формул , положив :math:`u_1`\ =0,

.. math::

   \begin{cases}
              $ $u_1+v_1=4$,$\\
              $ $u_1+v_2=8$,$\\
              $ $u_1+v_3=10$,$\\
              $ $u_2+v_3=2$,$\\
              $ $u_3+v_3=6$,$\\
              $ $u_3+v_4=5$,$\\
              $ $u_1=0$,$\\
           \end{cases}

 

.. math::

   \begin{cases}
              $ $u_1=0$,$\\
              $ $u_2=-8$,$\\
              $ $u_3=-4$,$\\
              $ $v_1=4$,$\\
              $ $v_2=8$,$\\
              $ $v_3=10$,$\\
              $ $v_4=9$,$\\
           \end{cases}

| 
| и занесем полученные значения в таблицу. Вычислим теперь разности
  :math:`\Delta c_{ij}` для свободных клеток и также проставим эти
  данные в левых нижних углах соответствующих клеток. В итоге получим
  следующую Tаблицу 4.

| *Транспортная таблица 4*

| |image|

Поскольку :math:`\Delta c_{14}`\ =-4<0, то этот план не является
оптимальным. Перераспределим груз по циклу, обозначенному в Tаблице 4
пунктиром, на величину :math:`\Delta x`\ = min(20,60)=20. Для этого в
клетках со знаком «плюс» увеличим поставки на 20 единиц, а клетках со
знаком «минус» – поставки на столько же уменьшим. Для сохранения
количества базисных клеток число 0 в клетке (1,3) не записываем, и она
становится свободной.

Вычислив потенциалы и разности :math:`\Delta c_{ij}` для нового плана,
видим, что снова есть отрицательная разность :math:`\Delta c_{32}`\ =-4.
Поэтому придется еще раз улучшать план. С этой целью перераспределим
груз по циклу, отмеченному в таблице 5 пунктиром, на величину
:math:`\Delta x`\ = min(40,40)=40. Так как в результате в цикле
получаются две клетки с нулевыми перевозками: (1,3) и (3,4) , то сделаем
свободной клетку (1,3), поскольку ее тариф перевозок больше. После
перераспределения груза по циклу вычислим все необходимые разности
:math:`\Delta c_{ij}`.

| *Транспортная таблица 5*

| |image|

Как видим, все :math:`\Delta c_{ij}` неотрицательны, значит, план
оптимален (Tаблица 6).

| *Транспортная таблица 6*

| |image|

Практическое применение транспортной задачи
-------------------------------------------

Пример решения транспортной задачи
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Пример:** На складах трех поставщиков :math:`A_1`, :math:`A_2`,
:math:`A_3` хранится 300, 250 и 200 единиц одного и того же груза. Этот
груз требуется доставить четырем потребителям :math:`B_1`, :math:`B_2`,
:math:`B_3` и :math:`B_4`, заказы которых составляют 220, 150, 250 и 180
единиц груза соответственно. Стоимости перевозок :math:`c_{ij}` единицы
груза с i-го склада j-му потребителю указаны в правых верхних углах
соответствующих клеток транспортной Таблицы 1.

| *Транспортная таблица 1*

|image|

Составить такой план перевозок груза, при котором общая стоимость всех
перевозок была бы минимальной.

**Решение:** Поскольку суммарный запас груза а=300+250+200=750 меньше
суммарной потребности b=220+150+250+180=800, то рассматриваемая
транспортная задача является открытой. Сведем ее к закрытой, добавив
фиктивного поставщика :math:`A'_4` с нулевыми тарифами перевозок и
запасом груза :math:`a'_4`\ =b-a=50. Составим первоначальный план
перевозок с помощью метода наименьшей стоимости, заполняя клетки в
следующем порядке - получаем Таблицу 2:

(4,2) :math:`\rightarrow` (3,2) :math:`\rightarrow` (2,3)
:math:`\rightarrow` (3,4) :math:`\rightarrow` (1,1) :math:`\rightarrow`
(1,4).

| *Транспортная таблица 2*

| |image|

Перейдем к анализу полученного плана. Заметим, что в этой задаче
m+n-1=4+4-1=7, а число занятых клеток в имеющемся плане равно 6. Значит,
необходимо пополнить план еще 1 клеткой, записав в ней 0, так, чтобы
пополненный план получился ациклическим. Выберем для этой цели,
например, клетку (4,3).

.. math::

   \begin{cases}
              $ $u_1+v_1=4$,$\\
              $ $u_1+v_4=6$,$\\
              $ $u_2+v_3=1$,$\\
              $ $u_3+v_2=1$,$\\
              $ $u_3+v_4=2$,$\\
              $ $u_4+v_2=0$,$\\
              $ $u_4+v_3=0$,$\\
              $ $u_1=0$,$\\
           \end{cases}

 

.. math::

   \begin{cases}
              $ $u_1=0$,$\\
              $ $u_2=-4$,$\\
              $ $u_3=-4$,$\\
              $ $u_4=-5$,$\\
              $ $v_1=4$,$\\
              $ $v_2=5$,$\\
              $ $v_3=5$,$\\
              $ $v_4=6$,$\\
           \end{cases}

Вычислим потенциалы по базисным клеткам плана и вычислим для свободных
клеток разности

:math:`\Delta c_{ij}`\ =\ :math:`c_{ij}`-(:math:`u_i`\ +\ :math:`v_j`).

Получим таблицу 3.

| *Транспортная таблица 3*

|image|

Поскольку среди чисел :math:`\Delta c_{ij}` есть отрицательные, то
перераспределим груз на величину

:math:`\Delta x`\ =min(80,100,0)=0

по циклу, обозначенному пунктиром. Клетка (1,3) станет базисной вместо
клетки (4,3), и мы получим Таблицу 4. План, указанный в Таблице 4, не
является оптимальным, поскольку

:math:`\Delta c_{22}`\ = :math:`\Delta c_{44}`\ =-1<0.

Улучшим этот план с помощью перераспределения поставок по циклу,
обозначенному в Таблице 4 пунктиром, на величину

:math:`\Delta x`\ =min(100,50)=50.

Получим Таблицу 4.

| *Транспортная таблица 4*

|image|

В Таблице 5 перераспределение осуществляется по ступенчатому циклу.

| *Транспортная таблица 5*

| |image|

После еще одного перераспределения поставок на величину
:math:`\Delta x`\ =80 , получим Таблицу 6.

| *Транспортная таблица 6*

| |image|

Заметим, что после каждого перераспределения груза производились
вычисления потенциалов и разностей :math:`\Delta c_{ij}` для полученного
плана, и эти данные проставлялись в таблицу.

В Таблице 6 все разности :math:`\Delta c_{ij} \geq 0`, следовательно,
план оптимален. Таким образом,

.. math::

   X= 
           \begin{pmatrix}
           220 & 0 & 80 & 0 \\
           0 & 80 & 170 & 0 \\
           0 & 70 & 0 & 130 
           \end{pmatrix}

Фиктивный груз :math:`a'_4`\ =50 в Таблице 6 означает, что потребителю
:math:`B_4` будет недопоставлено 50 единиц груза.

Найдем суммарную стоимость перевозок по оптимальному плану:

:math:`Z_{min}`\ =\ :math:`{ \sum_{i=1}^3 \sum_{j=1}^4 c_{ij}x_{ij}}`\ =4\ :math:`\cdot`\ 220+3\ :math:`\cdot`\ 80+2\ :math:`\cdot`\ 80+1\ :math:`\cdot`\ 170+1\ :math:`\cdot`\ 70+2\ :math:`\cdot`\ 130=1780.

.. raw:: latex

   \newpage

Задача о распределении средств
==============================

Общая схема метода динамического программирования
-------------------------------------------------

Метод динамического программирования дает возможность находить
последовательные оптимальные решения в задачах, разделенных на этапы.

Изложим схему применения этого метода на следующей модели. Рассмотрим
некоторую управляемую систему, которая может находиться в одном из
нескольких состояний. На каждом этапе в результате применения
управляющего воздействия (управления) система может изменить свое
состояние или остаться в прежнем состоянии. Эффективность процесса
управления характеризуется целевой функцией прибыли, зависящей от
состояния системы и применяемого управления.

0 этап. В начальный момент времени система находится в исходном
состоянии :math:`x_0`.

1 этап. В результате применения управления :math:`y_1` система переходит
из состояния :math:`x_0` в состояние

:math:`x_1`\ =\ :math:`g_1`\ (:math:`x_0`,\ :math:`y_1`),

при этом получается прибыль

:math:`h_1`\ (:math:`x_0`,\ :math:`y_1`),

2 этап. В результате применения управления :math:`y_2` система переходит
из состояния :math:`x_1` в состояние

:math:`x_2`\ =\ :math:`g_2`\ (:math:`x_1`,\ :math:`y_2`),

при этом получается прибыль

:math:`h_2`\ (:math:`x_1`,\ :math:`y_2`),

и так далее.

За N этапов получается последовательность состояний :math:`x_0`,
:math:`x_1`, :math:`x_2`, ..., :math:`x_n` и последовательность
управлений :math:`y_1`, :math:`y_2`, ..., :math:`y_n`, где

:math:`x_{n+1}`\ =\ :math:`g_n`\ (:math:`x_n`,\ :math:`y_{n+1}`),
:math:`{\qquad}` n=\ :math:`{\overline{0,N}}`,

а общая прибыль на каждом этапе вычисляется по формуле

:math:`J_n`\ (:math:`x_0`, :math:`y_1`,
...,\ :math:`y_n`)=\ :math:`h_1`\ (:math:`x_0`,
:math:`y_1`)+\ :math:`h_2`\ (:math:`x_1`,
:math:`y_2`)+...+\ :math:`h_n`\ (:math:`x_{n-1}`, :math:`y_n`),
:math:`{\qquad}` n=\ :math:`{\overline{1,N}}`,

Нашей целью является отыскание такой последовательности оптимальных
управлений {:math:`y_1^*`, :math:`y_2^*`, ..., :math:`y_N^*`},чтобы
функция прибыли :math:`J_n` достигла максимума

:math:`J_n`\ (:math:`x_0`, :math:`y_1^*`, ..., :math:`y_N^*`)=max
:math:`J_n`\ (:math:`x_0`, :math:`y_1`, ...,\ :math:`y_n`)

Принцип оптимальности Беллмана утверждает, что на последовательности
оптимальных управлений {:math:`y_1^*`, :math:`y_2^*`, ...,
:math:`y_N^*`} должна достигать максимума каждая из функций

:math:`f_n`\ (:math:`x_{n-1}`, :math:`y_n`, :math:`y_n
            {n+1}`, ..., :math:`y_N`)=\ :math:`h_n`\ (:math:`x_{n-1}`,
:math:`y_n`)+\ :math:`h_{n+1}`\ (:math:`x_n`,
:math:`y_{n+1}`)+...+\ :math:`h_N`\ (:math:`x_{N-1}`, :math:`y_N`),
:math:`{\qquad}` n=\ :math:`{\overline{1,N}}`.

Если ввести обозначения

:math:`\varphi_n(x_{n-1})`\ =max :math:`f_n`\ (:math:`x_{n-1}`,
:math:`y_n`, :math:`y_n
            {n+1}`, ..., :math:`y_N`) :math:`{\qquad}`
n=\ :math:`{\overline{1,N}}`,

то из принципа оптимальности Беллмана вытекает, что функции
:math:`\varphi_n(x_{n-1})` должны удовлетворять следующим функциональным
уравнениям Беллмана:

:math:`\varphi_n(x_{n-1})`\ =max[
:math:`\varphi_{n+1}(g_n(x_{n-1},y_n))+h_n(x_{n-1},y_n)`]
:math:`{\qquad}` n=\ :math:`{\overline{1,N}}`.

Решение уравнений Беллмана позволяет найти последовательность
оптимальных управлений и оптимальное значение функции прибыли.

Замечание. Для того, чтобы методом динамического программирования
находить не максимум функции прибыли, как было изложено выше, а минимум
функции затрат достаточно лишь заменить во всех соответствующих формулах
настоящего параграфа максимум на минимум.

Практическое применение распределения средств
---------------------------------------------

Пример решения задачи о распределении средств
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Используем метод динамического программирования для решения следующей
задачи.

Составить план распределения суммы в 4 миллиона долларов между тремя
предприятиями :math:`\text{П}_1`, :math:`\text{П}_2`,
:math:`\text{П}_3`, приносящий наибольшую прибыль, если в каждое из
предприятий может быть вложено 1, 2, 3 или 4 миллиона долларов, а
прибыль каждого из предприятий задана в Таблице 1:

| *Таблица 1*

.. raw:: latex

   \centering

+----------------+--------------------+--------------------+--------------------+
|                |                    |                    |                    |
+----------------+--------------------+--------------------+--------------------+
| .. raw:: latex | :math:`\text{П}_1` | :math:`\text{П}_2` | :math:`\text{П}_3` |
|                |                    |                    |                    |
|    \cline{2-4} |                    |                    |                    |
+----------------+--------------------+--------------------+--------------------+
| 0              | 0                  | 0                  | 0                  |
+----------------+--------------------+--------------------+--------------------+
| 1              | 20                 | 22                 | 25                 |
+----------------+--------------------+--------------------+--------------------+
| 2              | 20                 | 18                 | 23                 |
+----------------+--------------------+--------------------+--------------------+
| 3              | 20                 | 17                 | 15                 |
+----------------+--------------------+--------------------+--------------------+
| 4              | 18                 | 16                 | 19                 |
+----------------+--------------------+--------------------+--------------------+

**Решение:** Пусть :math:`h_1`, :math:`h_2`, :math:`h_3` - прибыли
(млн.долл.) предприятий :math:`\text{П}_1`, :math:`\text{П}_2`,
:math:`\text{П}_3`, соответственно. Тогда, пересчитывая данные из
Таблицы 1, получим следующую Таблицу 2:

| *Таблица 2*

.. raw:: latex

   \centering

+----------------+-------------+-------------+-------------+
|                |             |             |             |
+----------------+-------------+-------------+-------------+
| .. raw:: latex | :math:`h_1` | :math:`h_2` | :math:`h_3` |
|                |             |             |             |
|    \cline{2-4} |             |             |             |
+----------------+-------------+-------------+-------------+
| 0              | 0           | 0           | 0           |
+----------------+-------------+-------------+-------------+
| 1              | 0,2         | 0,22        | 0,25        |
+----------------+-------------+-------------+-------------+
| 2              | 0,4         | 0,36        | 0,46        |
+----------------+-------------+-------------+-------------+
| 3              | 0,6         | 0,51        | 0,45        |
+----------------+-------------+-------------+-------------+
| 4              | 0,72        | 0,64        | 0,76        |
+----------------+-------------+-------------+-------------+

Разобьем процесс выделения средств предприятиям на 3 этапа: на первом
этапе выделяется :math:`y_1` средств предприятию :math:`\text{П}_1`, на
втором – :math:`y_2` средств предприятию :math:`\text{П}_2`, на третьем
– :math:`y_3` средств предприятию :math:`\text{П}_3`.

Будем считать состоянием системы :math:`x_i`\ (i=0,1,2,3) ту сумму
средств, которая осталась нераспределенной после i-го этапа. Поскольку
необходимо распределить все 4 миллиона долларов, то :math:`x_0`\ =4.
Тогда

:math:`x_n`\ =\ :math:`x_{n-1}`-:math:`y_n`, :math:`{\qquad}` n=1,2,3.

Заметим, что на третьем этапе выделения средств весь остаток :math:`x_2`
вкладывается в предприятие :math:`\text{П}_3`, поэтому

:math:`y_3`\ =\ :math:`x_2`.

Воспользуемся уравнениями Беллмана для N=3. Тогда уравнения

:math:`\varphi_n(x_{n-1})`\ =max[
:math:`\varphi_{n+1}(g_n(x_{n-1},y_n))+h_n(x_{n-1},y_n)`]
:math:`{\qquad}` n=\ :math:`{\overline{1,N}}`.

примут следующий вид:

:math:`\varphi_3(x_2)`\ =max :math:`h_3(y_3)`, :math:`{\qquad}`
:math:`x_2`\ =0,1,2,3,4,

:math:`\varphi_2(x_1)`\ =max [:math:`h_2(y_2)+\varphi_3(x_1-y_2)`],
:math:`{\qquad}` :math:`x_1`\ =0,1,2,3,4,

:math:`\varphi_1(x_0)`\ =max [:math:`h_1(y_1)+\varphi_2(x_0-y_1)`],
:math:`{\qquad}` :math:`x_0`\ =4.

Обозначим значения управлений :math:`y_1`, :math:`y_2`, :math:`y_3`, на
которых достигается максимум в соотношениях, символами :math:`y_1^*`,
:math:`y_2^*`, :math:`y_3^*`, соответственно, и, воспользовавшись
Таблицей 2, заполним по формулам Таблицу 3:

| *Таблица 3*

.. raw:: latex

   \centering

+----------------+---+------+------+------+------+------+---+
|                |   |      |      |      |      |      |   |
+----------------+---+------+------+------+------+------+---+
| .. raw:: latex |   |      |      |      |      |      |   |
|                |   |      |      |      |      |      |   |
|    \cline{2-6} |   |      |      |      |      |      |   |
+----------------+---+------+------+------+------+------+---+
| 0              | 0 | -    | -    | -    | -    | 0    | 0 |
+----------------+---+------+------+------+------+------+---+
| 1              | - | 0,25 | -    | -    | -    | 0,25 | 1 |
+----------------+---+------+------+------+------+------+---+
| 2              | - | -    | 0,46 | -    | -    | 0,46 | 2 |
+----------------+---+------+------+------+------+------+---+
| 3              | - | -    | -    | 0,45 | -    | 0,45 | 3 |
+----------------+---+------+------+------+------+------+---+
| 4              | - | -    | -    | -    | 0,76 | 0,76 | 4 |
+----------------+---+------+------+------+------+------+---+

Воспользовавшись Таблицей 2 и формулами, заполним Таблицу 4:

| *Таблица 4*

.. raw:: latex

   \centering

+----------------+--------+-----------+-----------+-----------+--------+------+---+
|                |        |           |           |           |        |      |   |
+----------------+--------+-----------+-----------+-----------+--------+------+---+
| .. raw:: latex |        |           |           |           |        |      |   |
|                |        |           |           |           |        |      |   |
|    \cline{2-6} |        |           |           |           |        |      |   |
+----------------+--------+-----------+-----------+-----------+--------+------+---+
| 0              | 0+0    | -         | -         | -         | -      | 0    | 0 |
+----------------+--------+-----------+-----------+-----------+--------+------+---+
| 1              | 0+0,25 | 0,22+0    | -         | -         | -      | 0,25 | 0 |
+----------------+--------+-----------+-----------+-----------+--------+------+---+
| 2              | 0+0,46 | 0,22+0,25 | 0,36+0    | -         | -      | 0,47 | 1 |
+----------------+--------+-----------+-----------+-----------+--------+------+---+
| 3              | 0+0,45 | 0,22+0,46 | 0,36+0,25 | 0,51+0    | -      | 0,68 | 1 |
+----------------+--------+-----------+-----------+-----------+--------+------+---+
| 4              | 0+0,76 | 0,22+0,45 | 0,36+0,46 | 0,51+0,25 | 0,64+0 | 0,82 | 2 |
+----------------+--------+-----------+-----------+-----------+--------+------+---+

Воспользовавшись Таблицей 2 и формулой, заполним Таблицу 5:

| *Таблица 5*

.. raw:: latex

   \centering

+----------------+--------+----------+----------+----------+--------+------+---+
|                |        |          |          |          |        |      |   |
+----------------+--------+----------+----------+----------+--------+------+---+
| .. raw:: latex | 0      | 1        | 2        | 3        | 4      |      |   |
|                |        |          |          |          |        |      |   |
|    \cline{2-6} |        |          |          |          |        |      |   |
+----------------+--------+----------+----------+----------+--------+------+---+
| 4              | 0+0,82 | 0,2+0,68 | 0,4+0,47 | 0,6+0,25 | 0,72+0 | 0,88 | 1 |
+----------------+--------+----------+----------+----------+--------+------+---+

Из Таблицы 5 вытекает, что оптимальным управлением будет
:math:`y_1^*`\ =1, при этом оптимальная прибыль равна 0,88. Далее
получаем

:math:`x_1`\ =\ :math:`x_0-y_1^*`\ =4-1=3,
:math:`\varphi_2(x_1)`\ =\ :math:`\varphi_2(3)`\ =0,68,
:math:`y_2^*`\ =1;

:math:`x_2`\ =\ :math:`x_1-y_2^*`\ =3-1=2,
:math:`\varphi_3(x_2)`\ =\ :math:`\varphi_3(2)`\ =0,46,
:math:`y_3^*`\ =2.

Таким образом, наиболее оптимальным является вложение в предприятия
:math:`\text{П}_1`, :math:`\text{П}_2`, :math:`\text{П}_3` денежных
средств в размере 1, 1 и 2 миллионов долларов, соответственно. В этом
случае прибыль будет максимальной и составит 0,88 миллиона долларов.
Решение задачи завершено.

.. raw:: latex

   \newpage

.. raw:: latex

   \newpage

Задача о максимальном потоке
============================

Постановка задачи о максимальном потоке
---------------------------------------

Задача о максимальном потоке заключается в нахождении такого потока по
транспортной сети, что сумма потоков из истока, или, что то же самое,
сумма потоков в сток максимальна.

Рассмотрим сеть, имеющую только один источник s и только один сток t.
Рассмотрим задачу о потоке из узла s в узел t, причем s и t могут быть
связаны произвольно сложной промежуточной сетью. Задача о максимальном
потоке состоит в определении количества, которое можно перевезти из s в
t.

| Эту задачу можно проиллюстировать, как водопроводную или нефтяную
  сеть. Рассмотрим сеть трубопроводов для транспортировки сырой нефти от
  буровых скважин до нефтеперегонных заводов. Для перекачки нефти
  предусмотрены магистральные насосные станции. Каждый сегмент
  трубопровода имеет свою пропускную способность. Сегменты трубопровода
  могут быть как однонаправленные (осуществляют перекачку нефти только в
  одном направлении), так и в двунаправленные. В однонаправленных
  сегментах положительная пропускная способность предполагается в одном
  направлении и нулевая - в другом. На Рисунке 1 показана типовая сеть
  нефтепроводов. Как определить оптимальную пропускную способность (т.е.
  максимальный поток) между нефтяными скважинами и нефтеперегонными
  заводами?

|image|

Основные понятия
----------------

Сетью (flow network) называется ориентированный граф, каждому ребру
(i,j) которого сопоставлено неотрицательное число C(i,j), называемое
пропускной способностью, с двумя выделенными вершинами, называемыми
исток s (source) и сток t (sink).

Необходимо знать следующие правила для решения задачи.

1. Будем считать, что если поток из вершины i к j равен
:math:`\varphi_{ij}`, то противоположный поток равен
-:math:`\varphi_{ij}`.

2. Если поток по дуге :math:`\varphi_{ij}` меньше его пропускной
способности, то есть :math:`\varphi_{ij}<C_{ij}`, то дуга называется
ненасыщенной потоком, если же :math:`\varphi_{ij}=C_{ij}`, то дуга
называется насыщенной потоком.

3. Из физического смысла грузопотока следует, что поток по каждой дуге
не может превышать ее пропускную способность, т.е.
:math:`\varphi_{ij} \leq C_{ij}`.

4. Для любой вершины, кроме источника и стока, количество вещества,
поступающего в эту вершину, равно количеству вещества, вытекающего из
него. Это условие называется условием сохранения потока, в промежуточных
вершинах потоки не создаются и не исчезают – отсюда следует, что общее
количество вещества, вытекающего из источника, совпадает с общим
количеством вещества, поступающего в сток.

| Для ребра (i,j), где i<j, используем запись (:math:`C_{ij},C_{ji}`)
  для представления пропускных способностей в направлениях
  i\ :math:`\to`\ j и j\ :math:`\to`\ i соответственно. Во избежании
  недоразумений на схеме сети :math:`C_{ij}` будем располагать на ребре
  (i,j) ближе к узлу i, а :math:`C_{ji}` ближе к узлу j, как показано на
  Рисунок 2.

|image|

Разрез
------

Разрез определяет множество ребер, при удалении которых из сети
полностью прекращается поток от источника к столу. Пропускная
способность разреза равна сумме пропускных способностей разрезанных
ребер. Среди всех разрезов сети разрез с минимальной пропускной
способностью определяет максимальный поток в сети.

**Пример:**

| Рассмотрим сеть, показанную на Рисунке 3. На этом рисунке при
  обозначении пропускных способностей двунаправленных ребер
  придерживались соглашения, принятого ранее. Например, для ребра (3, 4)
  пропускная способность в направлении 3\ :math:`\to`\ 4 равна 10, а в
  направлении 4\ :math:`\to`\ 3 равна 5.

|image|

Разрезы, представленные на Рисунке 3, имеют следующие пропускные
способности:

.. raw:: latex

   \centering

+--------+--------------------------------+-------------------------+
| Разрез | "Разрезанные" ребра            | Пропускная способность  |
+========+================================+=========================+
| 1      | (1, 2), (1, 3), (1, 4)         | 10 + 30 + 20 = 60       |
+--------+--------------------------------+-------------------------+
| 2      | (1, 3), (1, 4), (2, 3), (2, 5) | 30 + 10 + 40 + 30 = 110 |
+--------+--------------------------------+-------------------------+
| 3      | (2, 5), (3, 5), (4, 5)         | 30 + 20 + 20 = 70       |
+--------+--------------------------------+-------------------------+

Вывод, который можно сделать из этих трех разрезов, заключается в том,
что максимальный поток не может превышать 60 единиц. Но мы не можем
сказать, какой максимальный поток на самом деле, так как не перебрали
все возможные разрезы сети. К сожалению, перебор всех разрезов является
непростой задачей. Поэтому для определения максимального потока в сети
не используются алгоритмы, основанные на полном переборе разрезов.

Алгоритм Форда-Фалкерсона нахождения максимального потока
---------------------------------------------------------

#. Обнуляем все потоки.

#. В сети находим любой путь из источника в сток. Если такого пути нет,
   останавливаемся.

#. Пускаем через найденный путь максимально возможный поток:

   #. На найденном пути в остаточной сети ищем ребро с минимальной
      пропускной способностью :math:`C_{min}`. (:math:`\beta`\ =min
      :math:`C_{ij}`>0)

   #. Для каждого ребра на найденном пути увеличиваем поток на
      :math:`C_{min}`, а в противоположном ему — уменьшаем на
      :math:`C_{min}`.
      (:math:`\varphi_{ij}`\ =\ :math:`\varphi_{ij} \pm C_{min}`)

   #. Модифицируем остаточную сеть. Для всех рёбер на найденном пути, а
      также для противоположных им рёбер, вычисляем новую пропускную
      способность. Если она стала ненулевой, добавляем ребро к
      остаточной сети, а если обнулилась, стираем его.
      (:math:`C_{ij}`\ =\ :math:`C_{ij}`-:math:`C_{min}`)

#. Возвращаемся на шаг 2.

Величина максимального потока в транспортной сети T равна минимальной из
пропускных способностей его сечений.

:math:`\varphi_{max}=\varphi_{max}+C_{ij}`

Практическое применение максимального потока
--------------------------------------------

Пример решения типовой задачи с помощью максимального потока
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Пример:**

Рассмотрим транспортную сеть T, пусть :math:`\varphi_0` - нулевой поток.

|image|

Нашли путь (обозначен красным цветом)

|image|

:math:`P_1`\ =s(s,a)a(a,b)b(b,d)d(d,t)t.

| Тогда :math:`\beta`\ =min :math:`C_{ij}`\ =min(5, 4, 5, 5)=4, и поток
  :math:`\varphi_{max}`\ =4.
| Дуга (a,b) - насыщенная
  :math:`C_{ij}`\ =\ :math:`C_{ij}`-:math:`C_{min}`\ =4-4=0, поэтому мы
  ее вычеркиваем. Вычисляем пропускную способность и увеличиваем поток
  для каждого ребра.

|image|

Нашли новый путь (обозначен синим цветом)

|image|

:math:`P_2`\ =s(s,b)b(b,d)d(d,t)t.

| Тогда :math:`\beta`\ =min :math:`C_{ij}`\ =min(3, 1, 1, 1)=1, и поток
  :math:`\varphi_{max}`\ =4+1=5.
| Дуги (b,d), (d,t) - насыщенные
  :math:`C_{ij}`\ =\ :math:`C_{ij}`-:math:`C_{min}`\ =1-1=0, поэтому мы
  их вычеркиваем. Вычисляем пропускную способность и увеличиваем поток
  для каждого ребра.

|image|

Нашли еще один путь (обозначен зеленым цветом)

|image|

:math:`P_3`\ =s(s,a)a(a,b)c(c,t)t.

| Тогда :math:`\beta`\ =min :math:`C_{ij}`\ =min(1, 2, 7)=1, и поток
  :math:`\varphi_{max}`\ =5+1=6.
| Дуга (s,a) - насыщенная
  :math:`C_{ij}`\ =\ :math:`C_{ij}`-:math:`C_{min}`\ =1-1=0, поэтому мы
  ее вычеркиваем. Вычисляем пропускную способность и увеличиваем поток
  для каждого ребра.

|image|

| Как видно путей из источника в сток не осталось, значит задача
  завершена.
| Получаем, что максимальный поток :math:`\varphi_{max}`\ =6, так же
  соблюдается закон сохранения вещества - общее количество вещества,
  вытекающего из источника, совпадает с общим количеством вещества,
  поступающего в сток.

**Oтвет:** :math:`\varphi_{max}`\ =6.

.. raw:: latex

   \newpage

Сетевое планирование
====================

Понятие сети
------------

| Ориентированным циклом называют цикл, который можно обойти, следуя
  направлениям дуг. Примером такого цикла служит цикл, изображенный на
  Рисунок 1.

| |image|

Сетью называют связный ориентированный граф без ориентированных циклов,
удовлетворяющий следующим условиям:

1. Граф имеет единственную вершину, из которой стрелки выходят. Эту
вершину называют источником.

2. Граф имеет единственную вершину, в которую стрелки входят. Эту
вершину называют стоком.

3. Все остальные вершины имеют как входящие, так и выходящие стрелки.

| 4. Две смежные вершины соединяет только одна стрелка.
| Примером сети является граф, изображенный на Рисунок 2.

| |image|

Построение сетевого графика технологического комплекса
------------------------------------------------------

Понятие сети, введенное в предыдущем параграфе, используется для
построения сетевых графиков технологических комплексов. Чтобы построить
сетевой график, рассмотрим технологический комплекс, включающий
нескольких технологических операций, и будем считать, что каждая
технологическая операция характеризуется временем начала и временем
выполнения. Будем также считать, что последовательность выполнения
технологических операций известна. Если назвать начало и конец операции
узлами технологического комплекса, то каждую операцию можно представлять
как переход от одного узла к другому. Пронумеруем теперь узлы
натуральными числами от 1 до n и введем следующие обозначения:

-  Операцию перехода от i-го узла к j-му узлу обозначим символом
   i\ :math:`\rightarrow`\ j . Символ i\ :math:`\rightarrow`\ j назовем
   шифром операции;

-  Время выполнения операции i\ :math:`\rightarrow`\ j обозначим
   символом :math:`t_{ij}`;

-  Время начала операции i\ :math:`\rightarrow`\ j обозначим символом
   :math:`t_i`;

-  Время окончания операции i\ :math:`\rightarrow`\ j обозначим символом
   :math:`t_j`.

Изобразим теперь на рисунке каждый узел кружком, внутри которого указан
номер узла. Начальный узел технологического комплекса (источник)
изобразим кружком с номером 1. Конечный узел технологического комплекса
(сток) изобразим кружком с номером n. Каждую операцию изобразим звеном,
состоящим из двух кружков (узлов), соединенных дугой (стрелкой). Начало
стрелки соответствует начальному узлу операции, конец стрелки –
завершающему. Продолжительность :math:`t_{ij}` операции укажем над
стрелкой, изображена на Рисунке 3. 

| |image|

В результате получим сеть, которую называют сетевым графиком
рассматриваемого технологического комплекса.

Постановка задачи о нахождении наименьшего времени выполнения технологического комплекса
----------------------------------------------------------------------------------------

Рассмотрим следующую задачу, относящуюся к задачам сетевого
планирования.

**Задача:** Технологический комплекс производства продукции состоит из
10 узлов. Последовательность выполнения операций и их продолжительность
в часах заданы следующей Таблицей 1

| *Таблица 1*

.. raw:: latex

   \centering

+---------+----------------------------+----------------------------+
| № п. п. | Шифр операции              | Продолжительность операции |
+=========+============================+============================+
| 1       | 1\ :math:`\rightarrow`\ 2  | 2                          |
+---------+----------------------------+----------------------------+
| 2       | 1\ :math:`\rightarrow`\ 3  | 6                          |
+---------+----------------------------+----------------------------+
| 3       | 1\ :math:`\rightarrow`\ 4  | 3                          |
+---------+----------------------------+----------------------------+
| 4       | 2\ :math:`\rightarrow`\ 3  | 4                          |
+---------+----------------------------+----------------------------+
| 5       | 2\ :math:`\rightarrow`\ 5  | 8                          |
+---------+----------------------------+----------------------------+
| 6       | 3\ :math:`\rightarrow`\ 5  | 6                          |
+---------+----------------------------+----------------------------+
| 7       | 3\ :math:`\rightarrow`\ 6  | 5                          |
+---------+----------------------------+----------------------------+
| 8       | 3\ :math:`\rightarrow`\ 7  | 4                          |
+---------+----------------------------+----------------------------+
| 9       | 4\ :math:`\rightarrow`\ 3  | 4                          |
+---------+----------------------------+----------------------------+
| 10      | 4\ :math:`\rightarrow`\ 6  | 7                          |
+---------+----------------------------+----------------------------+
| 11      | 4\ :math:`\rightarrow`\ 7  | 6                          |
+---------+----------------------------+----------------------------+
| 12      | 5\ :math:`\rightarrow`\ 8  | 5                          |
+---------+----------------------------+----------------------------+
| 13      | 6\ :math:`\rightarrow`\ 8  | 6                          |
+---------+----------------------------+----------------------------+
| 14      | 6\ :math:`\rightarrow`\ 9  | 3                          |
+---------+----------------------------+----------------------------+
| 15      | 6\ :math:`\rightarrow`\ 10 | 13                         |
+---------+----------------------------+----------------------------+
| 16      | 7\ :math:`\rightarrow`\ 9  | 5                          |
+---------+----------------------------+----------------------------+
| 17      | 8\ :math:`\rightarrow`\ 10 | 10                         |
+---------+----------------------------+----------------------------+
| 18      | 9\ :math:`\rightarrow`\ 10 | 11                         |
+---------+----------------------------+----------------------------+

Требуется найти наименьшее время :math:`\text{Т}_\text{кр}`, необходимое
для того, чтобы выполнить весь технологический комплекс (критическое
время).

Описание алгоритма динамического программирования для решения задачи о наименьшем времени выполнения технологического комплекса
-------------------------------------------------------------------------------------------------------------------------------

Построение сетевого графика, упорядоченного по этапам
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Первым шагом алгоритма динамического программирования для решения
указанной задачи сетевого планирования является построение
упорядоченного по этапам эскиза сетевого графика технологического
комплекса. Схема построения эскиза упорядоченного по этапам сетевого
графика заключается в следующем:

-  Кружок, соответствующий источнику, располагаем левее остальных
   кружков;

-  Источник считаем этапом с номером 0;

-  Каждый последующий этап изображаем правее предыдущего;

-  Узлы одного этапа изображаем на одной вертикали;

-  Каждый последующий этап формируем из узлов, которые не будут иметь
   входящих стрелок при мысленном удалении узлов с выходящими из них
   стрелками всех предыдущих этапов;

-  Кружки добавляем на эскиз сетевого графика последовательно по этапам
   и без повторений пронумеровываем числами от 1 до n ;

-  Кружки соединяем стрелками в соответствии с заданной в таблице
   последовательностью выполнения технологических операций;

-  Над стрелками, изображающими операции i\ :math:`\rightarrow`\ j ,
   проставляем времена :math:`t_ij`;

-  Сток считаем конечным этапом;

-  Проверяем выполнимость требований, которым должна удовлетворять сеть.

Расчет времени завершения узлов
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-  Считаем, что начало всех работ технологического комплекса, происходит
   в момент времени :math:`t_1`\ =0. Число 0 проставляем над кружком
   (узлом) с номером 1;

-  Время завершения каждого j-го узла из 1-го этапа рассчитываем по
   формуле :math:`t_j`\ =\ :math:`t_1+t_{1j}=t{1_j}`;

-  Время завершения каждого j-го узла из остальных этапов рассчитываем
   по формуле

   :math:`t_j`\ =max(\ :math:`t_i+t_{ij}`),

   где максимум берется по всем входящим в j-й узел стрелкам, а индексы
   i-номера предшествующих узлов, из которых выходят входящие в j-й узел
   стрелки;

-  Время :math:`t_j` проставляем над кружком, соответствующим j-у узлу.

Замечание. Соотношение :math:`t_j`\ =max(\ :math:`t_i+t_{ij}`) и
является для рассматриваемой задачи функциональным уравнением Р.
Беллмана.

Построение критического пути и нахождение критического времени завершения комплекса работ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-  Время :math:`t_n` завершения последнего n-го узла назовем критическим
   временем завершения всего комплекса работ. Критическое время
   обозначим символом :math:`\text{Т}_\text{кр}`;

-  Критическим путем назовем путь, который строится обратным ходом,
   начиная от последнего n-го узла, и достигает первого узла при помощи
   выделения стрелок, реализующих критическое время;

-  Операции, составляющие критический путь, называются критическими.

Замечание. Критический путь может быть неединственным.

Нахождение свободных резервов времени на некритических операциях
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-  Операции, не являющиеся критическими, назовем некритическими;

-  Путь, начальный и конечный узлы которого лежат на критическом пути, а
   составляющие его операции являются некритическими, назовем
   некритическим;

-  Свободный резерв времени :math:`P_{ij}^c` на некритической операции
   i\ :math:`\rightarrow`\ j находим по формуле

   :math:`P_{ij}^c`\ =\ :math:`t_j-t_i-t_{ij}`

-  Значение :math:`P_{ij}^c` проставляем над стрелкой
   i\ :math:`\rightarrow`\ j в скобках справа от символа :math:`t_{ij}`,
   изображено на Рисунке 4.

   | |image|

Замечание. На критических операциях резерв свободного времени равен
нулю. Следовательно, для сокращения времени завершения всего комплекса
работ в первую очередь необходимо сокращать продолжительность
критических операций.

Применение алгоритма динамического программирования для решения задачи о наименьшем времени выполнения технологического комплекса
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Проанализировав данные из Таблицы 1, составим первоначальный эскиз
сетевого графика на Рисунке 5.

| |image|

Упорядочив первоначальный эскиз сетевого графика по этапам, и, произведя
необходимые расчеты времен окончания операций, получим Рисунок 6.

| |image|

Из рисунка 6 вытекает, что сетевой график содержит 5 этапов,
:math:`\text{Т}_\text{кр}`\ =28 часов. Заметим также, что сетевой график
имеет два критических пути, которые на Рисунке 6 изображены жирными
линиями и состоят из следующих узлов:

1\ :math:`\rightarrow`\ 4\ :math:`\rightarrow`\ 3\ :math:`\rightarrow`\ 5\ :math:`\rightarrow`\ 8\ :math:`\rightarrow`\ 10
и
1\ :math:`\rightarrow`\ 4\ :math:`\rightarrow`\ 3\ :math:`\rightarrow`\ 6\ :math:`\rightarrow`\ 8\ :math:`\rightarrow`\ 10.

На каждом из критических путей критическое время одно и тоже - 28 часов.
Свободные резервы времени на некритических операциях :math:`P_{ij}^c` на
рисунке проставлены в скобках. Решение задачи завершено.

Практическое применение сетевого планирования
---------------------------------------------

Пример решения задачи о сетевом планировании
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Рассмотрим сеть, изображенную на Рисунке 7. На этом рисунке над каждой
дугой записано число, называемое длиной дуги. Требуется найти кратчайший
путь (путь минимальной длины), ведущий из источника в сток.

| |image|

Кратчайший путь, ведущий из источника сети в сток, изображен на Рисунке
7 при помощи последовательности жирных стрелок. Чтобы найти этот путь,
требуется чуть-чуть изменить алгоритм нахождения критического пути,
проставляя над каждым этапом не максимум, а минимум расстояний по всем
входящим в рассматриваемый узел стрелкам. Совершив описанную операцию,
находим, что кратчайший путь имеет вид

1\ :math:`\rightarrow`\ 2\ :math:`\rightarrow`\ 3\ :math:`\rightarrow`\ 6\ :math:`\rightarrow`\ 9\ :math:`\rightarrow`\ 10,

а длина его равна 22. Решение задачи завершено.

.. raw:: latex

   \newpage

.. raw:: latex

   \newpage

Стратегии управления запасами и заказами
========================================

Теоретические основы стратегии управления запасами и заказами
-------------------------------------------------------------

Решаемые задач
~~~~~~~~~~~~~~

Задача управления запасами возникает, когда необходимо создать запас
материальных ресурсов или предметов потребления с целью удовлетворения
спроса на заданном интервале времени (конечном или бесконечном).

Для обеспечения непрерывного и эффективного функционирования практически
любой организации необходимо создание запасов.

В любой задаче управления запасами требуется определять количество
заказываемой продукции и сроки размещения заказа. Спрос можно
удовлетворить путём однократного создания запаса на весь рассматриваемый
период времени или посредством создания запаса для каждой единицы
времени этого периода. Эти два случая соответствую избыточному запасу
(по отношению к единице времени) и недостаточному запасу (по отношению к
полному периоду времени).

Все широко применяемые в настоящее время логистические системы
используют запасы. Следовательно, для каждого предприятия важной задачей
является разработка оптимальной стратегии управления запасами. В
качестве запасов можно рассматривать сырье, полуфабрикаты и готовую
продукцию.

Задача управления запасами напрямую связана с организацией процесса
закупок, а также со сбытом готовой продукции. Методы и модели теории
управления запасами позволяют определить оптимальные решения по
управлению логистическими подсистемами снабжения, запасов, и сбыта,
обеспечить эффективную и согласованную работу этих подсистем.

Постановка задачи
~~~~~~~~~~~~~~~~~

Задача управления запасами в общем случае формулируется следующим
образом: определить оптимальный размер запаса, размер, частоту и сроки
поставки заказа, минимизирующие суммарные затраты. В затраты обычно
входит стоимость закупки, доставки и хранения продукции. Существуют
различные модели или задачи управления запасами, соответствующие
различным входным условиям и внутренним требованиям исследуемой системы.
Расчет моделей позволяет минимизировать затраты на закупку, доставку
заказов и хранение запасов, то есть оптимизировать работу логистической
системы предприятия.

Модель Уилсона
--------------

Математические модели управления запасами (УЗ) позволяют найти
оптимальный уровень запасов некоторого товара, минимизирующий суммарные
затраты на покупку, оформление и доставку заказа, хранение товара, а
также убытки от его дефицита. Модель Уилсона является простейшей моделью
УЗ и описывает ситуацию закупки продукции у внешнего поставщика, которая
характеризуется следующими допущениями:

-  интенсивность потребления является априорно известной и постоянной
   величиной;

-  заказ доставляется со склада, на котором хранится ранее произведенный
   товар;

-  время поставки заказа является известной и постоянной величиной;

-  каждый заказ поставляется в виде одной партии;

-  затраты на осуществление заказа не зависят от размера заказа;

-  затраты на хранение запаса пропорциональны его размеру;

-  отсутствие запаса (дефицит) является недопустимым.

Входные параметры модели Уилсона
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. :math:`\upsilon` – интенсивность (скорость) потребления запаса,
   [ед.тов./ед.t];

#. s – затраты на хранение запаса, [руб./ед.тов.ед.t];

#. K - затраты на осуществление заказа, включающие оформление и доставку
   заказа, [руб.];

#. :math:`t_{\text{д}}` – время доставки заказа, [ед.t].

Выходные параметры модели Уилсона
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Q – размер заказа, [ед.тов.];

#. L – общие затраты на управление запасами в единицу времени,
   [руб./ед.t];

#. :math:`\tau` – период поставки, т.е. время между подачами заказа или
   между поставками, [ед.t];

#. :math:`h_0` – точка заказа, т.е. размер запаса на складе, при котором
   надо подавать заказ на доставку очередной партии, [ед. тов.].

Циклы изменения запасов в модели Уилсона
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Циклы изменения уровня запаса в модели Уилсона графически представлены
на Рисунке 1. Максимальное количество продукции, которая находится в
запасе, совпадает с размером заказа Q.

| |image|

Формулы модели Уилсона
~~~~~~~~~~~~~~~~~~~~~~

:math:`Q_w`\ =\ :math:`\sqrt[]{\frac{2K}{\upsilon}}` :math:`\qquad`
(формула Уилсона),

где :math:`Q_w` – оптимальный размер заказа в модели Уилсона;

| L=\ :math:`K\cdot \frac{\upsilon}{Q}+s\cdot \frac{Q}{2};`
| :math:`\tau`\ =\ :math:`\frac{Q}{\upsilon}`;
| :math:`h_0`\ =\ :math:`\upsilon t_{\text{д}}`.

График затрат на УЗ в модели Уилсона представлен на Рисунок 2.

| |image|

Модель планирования экономичного размера партии
-----------------------------------------------

Модель Уилсона, используемую для моделирования процессов закупки
продукции у внешнего поставщика, можно модифицировать и применять в
случае собственного производства продукции. На Рисунке 3 схематично
представлен некоторый производственный процесс. На первом станке
производится партия деталей с интенсивностью :math:`\lambda` деталей в
единицу времени, которые используются на втором станке с интенсивностью
:math:`\upsilon` [дет./ед.t].

| |image|

Входные параметры модели планирования экономичного размера партии
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. :math:`\lambda` – интенсивность производства продукции первым
   станком, [ед. тов./ед. t];

#. :math:`\upsilon` – интенсивность потребления запаса, [ед.тов./ед.t];

#. s – затраты на хранение запаса, [руб./ед.тов.ед.t];

#. K – затраты на осуществление заказа, включающие подготовку
   (переналадку) первого станка для производства продукции, потребляемой
   на втором станке, [руб.];

#. :math:`t_{\text{п}}` – время подготовки производства (переналадки),
   [ед.t].

Выходные параметры модели планирования экономичного размера партии
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Q – размер заказа, [ед. тов.];

#. L – общие затраты на управление запасами в единицу времени,
   [руб./ед.t];

#. :math:`\tau` – период запуска в производство партии заказа, т.е.
   время между включениями в работу первого станка, [ед. t];

#. :math:`h_0` – точка заказа, т.е. размер запаса, при котором надо
   подавать заказ на производство очередной партии, [ед. тов.].

Изменение уровня запасов происходит следующим образом на Рисунке 4:

-  в течение времени :math:`t_1` работают оба станка, т.е. продукция
   производится и потребляется одновременно, вследствие чего запаса
   накапливается с интенсивностью (:math:`\lambda`-:math:`\upsilon`);

-  в течение времени :math:`t_2` работает только второй станок,
   потребляя накопившийся запас с интенсивностью :math:`\upsilon`.

| |image|

Формулы модели экономичного размера партии
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:math:`Q_w^*`\ =\ :math:`\sqrt{\frac{2K\upsilon\lambda}{s(\lambda-\upsilon)}}`
:math:`\qquad` или :math:`\qquad`
:math:`Q_w^*`\ =\ :math:`\sqrt{\frac{2K\upsilon}{S(1-\upsilon/\lambda)}}`,

где \* – означает оптимальность размера заказа;

| L=\ :math:`K\cdot\frac{\upsilon}{Q}+s\cdot\frac{Q(\lambda-\upsilon)}{2\lambda}`
  :math:`\qquad` или :math:`\qquad`
  L=\ :math:`K\cdot\frac{\upsilon}{Q}+s\cdot\frac{Q(  -\upsilon/\lambda)}{2}`;
| H=\ :math:`\frac{Q(\lambda-\upsilon}{\lambda}` :math:`\qquad` или
  :math:`\qquad` H=Q(1-\ :math:`\upsilon/\lambda`);
| :math:`\tau`\ =\ :math:`\frac{Q}{\upsilon}`;
| :math:`h_0=\upsilon t_{\text{п}}`.

Методические рекомендации
-------------------------

Основная сложность при решении задач по УЗ состоит в правильном
определении входных параметров задачи, поскольку не всегда в условии их
числовые величины задаются в явном виде. При использовании формул модели
УЗ необходимо внимательно следить за тем, чтобы все используемые в
формуле числовые величины были согласованы по единицам измерения. Так,
например, оба параметра s и :math:`\upsilon` должны быть приведены к
одним и тем же временных единицам (к дням, к сменам или к годам),
параметры K и s должны измеряться в одних и тех же денежных единицах и
т.д.

Практическое применение стратегии управления запасами и заказами
----------------------------------------------------------------

Пример решения задачи управления запасами и заказами
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Пример:**

На некотором станке производятся детали в количестве 2000 штук в месяц.
Эти детали используются для производства продукции на другом станке с
интенсивностью 500 шт. в месяц. По оценкам специалистов компании,
издержки хранения составляют 50 коп. в год за одну деталь. Стоимость
производства одной детали равна 2,50 руб., а стоимость на подготовку
производства составляет 1000 руб. Каким должен быть размер партии
деталей, производимой на первом станке, с какой частотой следует
запускать производство этих партий?

**Решение:**

K=1000 руб., :math:`\lambda`\ =2000 шт. в месяц или 24000 шт. в год,
:math:`\upsilon`\ =500 шт. в месяц или 6000 шт. в год, s=0,50 руб. в год
за деталь. В данной ситуации необходимо использовать модель планирования
экономичного размера партии.

:math:`Q_w^*`\ =\ :math:`\sqrt{\frac{2K\upsilon\lambda}{s(\lambda-\upsilon)}}`\ =\ :math:`\sqrt{\frac{2\cdot1000\cdot6000\cdot24000}{0,50\cdot(24000-6000)}}`\ =5656,9\ :math:`\approx`\ 5657
шт.

Частота запуска деталей в производство равна

:math:`\tau`\ =\ :math:`\frac{Q}{\upsilon}`\ =\ :math:`\frac{5657}{6000}`\ =0,94
года или 11,28 месяцев.

Общие затраты на УЗ составляют

L=\ :math:`K\cdot\frac{\upsilon}{Q}+s\cdot\frac{Q(\lambda-\upsilon)}{2\lambda}`\ =\ :math:`\frac{1000\cdot6000}{5657}+\frac{0,50\cdot5657\cdot18000}{2\cdot24000}`\ =2121,32
руб. в год.

.. raw:: latex

   \newpage

Система массового обслуживания
==============================

Элементы теории массового обслуживания
--------------------------------------

Классификация систем массового обслуживания
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

В каждую систему массового обслуживания (СМО) поступает входящий поток
заявок на обслуживание. Результатом работы СМО является выходящий поток
обслуженных заявок.

-  Потоком событий называется последовательность однородных событий,
   происходящих в какие-то, вообще говоря, случайные моменты времени;

-  Если в СМО одновременно может обслуживаться несколько заявок, то СМО
   называется многоканальной, в противном случае СМО называется
   одноканальной;

-  Как одноканальные СМО, так и многоканальные СМО делятся на СМО с
   отказами и СМО с очередью (ожиданием);

-  В СМО с отказами заявка, поступившая в момент, когда все каналы
   обслуживания заняты, получает «отказ» в обслуживании и покидает СМО;

-  В СМО с очередью заявка, поступившая в момент, когда все каналы
   обслуживания заняты, становится в очередь из заявок, ожидающих
   обслуживания. Как только один из каналов обслуживания освобождается,
   к обслуживанию принимается одна из заявок, стоящих в очереди;

-  СМО с очередью различаются по принципу построения (дисциплине)
   очереди;

-  Принципом построения очереди называется схема, в соответствии с
   которой заявки из очереди выбираются на обслуживание. Чаще всего при
   этом используется:

   #. Случайный выбор заявки из очереди.

   #. Выбор заявки из очереди в зависимости от её приоритета.

   #. Выбор заявки в зависимости от порядка её поступления в очередь.

В третьем случае заявки из очереди могут обслуживаться, как по схеме:
«Первым пришел - первым обслуживаешься», так и по схеме: «Последним
пришел - первым обслуживаешься».

-  СМО с очередью делятся также на СМО с неограниченным ожиданием и СМО
   с ограниченным ожиданием;

-  В СМО с неограниченным ожиданием каждая заявка, поступившая в СМО,
   рано или поздно будет обслужена;

-  В СМО с ограниченным ожиданием на пребывание заявок в очереди
   накладываются различного рода ограничения. Эти ограничения могут
   касаться, например, длины очереди, времени пребывания заявки в
   очереди, общего времени пребывания заявки в СМО и т.п. В частности, в
   СМО с ограниченным временем пребывания в очереди, заявка,
   израсходовавшая лимит времени пребывания в очереди, покидает СМО.

Простейший поток событий и его свойства
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Поток событий называется простейшим потоком событий, если он обладает
следующими свойствами стационарности, отсутствия последействия и
ординарности:

#. Поток событий называется стационарным, если вероятность появления
   одного или нескольких событий на участке времени длины T зависит
   только от длины T этого участка и не зависит от того, в каком месте
   оси времени этот участок располагается.

#. Поток событий называется потоком с отсутствием последействия (без
   последействия), если события, составляющие поток, появляются в
   случайные моменты времени независимо друг от друга.

#. Поток событий называется ординарным, если события, составляющие
   поток, происходят поодиночке, а не парами, тройками и т.д.

-  Интенсивностью (плотностью) потока событий называется среднее число
   событий, происходящих в единицу времени.

Замечание. Поток, в котором события происходят через равные промежутки
времени, не является простейшим потоком событий!

Замечание. Простейший поток событий обладает постоянной интенсивностью.

Замечание. В дальнейшем изложении будем предполагать, что все потоки
событий являются простейшими потоками, не оговаривая этого особо.

Простейший поток событий близко связан с распределением Пуассона.
Действительно, справедливо следующее

**Утверждение 1.**

Вероятность того, что на отрезке времени длины T произойдет ровно k
событий из простейшего потока с интенсивностью :math:`\lambda`,
выражается формулой Пуассона

:math:`P_k`\ =\ :math:`\frac{(\lambda T)^k}{k!}e^{-\lambda T}`, k=0,1,
... .

**Утверждение 2.**

Длина отрезка времени между последовательными событиями из простейшего
потока событий с интенсивностью :math:`\lambda` является случайной
величиной, распределенной по показательному (экспоненциальному) закону с
параметром :math:`\lambda`.

Замечание. Напомним, что плотность показательного распределения
определяется по формуле

.. math::

   f(t)=\left( 
           \begin{array}{cc}
               0  & при -\infty<t<0 \\
               \lambda\cdot e^{-\lambda t} & при 0\leq t\leq +\infty
           \end{array}
           \right)

Показатели эффективности СМО
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Рассмотрим сначала СМО с отказами.

Важнейшими показателями эффективности СМО с отказами являются следующие
параметры:

#. Абсолютная пропускная способность системы.

#. Относительная пропускная способность системы.

-  Абсолютной пропускной способностью СМО называется среднее число
   заявок, которое может обслужить система за единицу времени;

-  Относительной пропускной способностью СМО называется средняя доля
   поступивших заявок, обслуживаемая системой, т.е. отношение среднего
   числа заявок, которое может обслужить система за единицу времени, к
   среднему числу заявок, поступивших в систему за это время.

В некоторых практических задачах используются и другие показатели
эффективности СМО с отказами, например, среднее число занятых каналов,
среднее относительное время простоя системы, среднее относительное время
простоя отдельного канала и т.п.

Перейдем теперь к СМО с ожиданием.

В качестве показателей эффективности СМО с неограниченным ожиданием
применяются следующие параметры:

#. Среднее число заявок в очереди.

#. Среднее число обслуживаемых заявок.

#. Среднее время ожидания заявки в очереди.

#. Среднее время обслуживания заявки.

Поскольку в СМО с неограниченным ожиданием каждая заявка, в конце
концов, обслуживается, то для таких систем абсолютная пропускная
способность совпадает с интенсивностью входящего потока заявок.

У СМО с ограниченным ожиданием в качестве показателей эффективности
используются как показатели эффективности СМО с отказами, так и
показатели эффективности СМО с неограниченным ожиданием.

При исследовании многоканальных систем в дополнение к перечисленным выше
показателям эффективности используются параметры, описывающие каждый из
каналов.

Расчет показателей эффективности одноканальной СМО с отказами
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Список используемых терминов и обозначений

.. raw:: latex

   \centering

+---+------------------------------------------------+-----------------------+
| № | Термин                                         | Обозначение           |
+===+================================================+=======================+
| 1 | Интенсивность входящего потока заявок          | :math:`\lambda`       |
+---+------------------------------------------------+-----------------------+
| 2 | Интенсивностьвыходящегопотокаобслуженныхзаявок | :math:`\mu`           |
+---+------------------------------------------------+-----------------------+
| 3 | Приведенная интенсивность потока заявок        | :math:`\rho`          |
+---+------------------------------------------------+-----------------------+
| 4 | Среднее время обслуживания заявки              | :math:`\bar t_{serv}` |
+---+------------------------------------------------+-----------------------+
| 5 | Относительная пропускная способность СМО       | q                     |
+---+------------------------------------------------+-----------------------+
| 6 | Абсолютная пропускная способность СМО          | A                     |
+---+------------------------------------------------+-----------------------+
| 7 | Вероятностьтого,чтозаявкабудетобслужена        | :math:`P_{serv}`      |
+---+------------------------------------------------+-----------------------+
| 8 | Вероятность того, что заявка получит отказ     | :math:`P_{otk}`       |
+---+------------------------------------------------+-----------------------+

Постановка задачи

Параметры :math:`\lambda` и :math:`\mu` известны.

Требуется найти :math:`\bar t_{serv}`, :math:`\rho`, q, A,
:math:`P_{serv}`, :math:`P_{otk}`.

Формулы для расчетов

В теории массового обслуживания доказывается, что показатели
эффективности одноканальной СМО с отказами вычисляются по следующим
формулам:

| :math:`\bar t_{serv}`\ =\ :math:`\frac{1}{\mu}`,
| :math:`\rho`\ =\ :math:`\frac{\lambda}{\mu}`,
| q=\ :math:`\frac{1}{\rho+1}`,
| A=\ :math:`\lambda`\ q,
| :math:`P_{serv}`\ =q,
| :math:`P_{otk}`\ =1-\ :math:`P_{serv}`.

Расчет показателей эффективности многоканальной СМО с отказами
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Список используемых терминов и обозначений

.. raw:: latex

   \centering

+-----------------------+-----------------------+-----------------------+
| №                     | Термин                | Обозначение           |
+=======================+=======================+=======================+
| 1                     | Число каналов         | n (n>1)               |
|                       | обслуживания          |                       |
+-----------------------+-----------------------+-----------------------+
| 2                     | Интенсивность         | :math:`\lambda`       |
|                       | входящего потока      |                       |
|                       | заявок                |                       |
+-----------------------+-----------------------+-----------------------+
| 3                     | Интенсивность потока  | :math:`\mu`           |
|                       | обслуженных заявок,   |                       |
|                       | выходящего изодного   |                       |
|                       | канала                |                       |
+-----------------------+-----------------------+-----------------------+
| 4                     | Приведенная           | :math:`\rho`          |
|                       | интенсивность потока  |                       |
|                       | заявок                |                       |
+-----------------------+-----------------------+-----------------------+
| 5                     | Вероятность того, что | :math:`p_0, p_1, ..., |
|                       | занято 0, 1, ..., n   |  p_n`                 |
|                       | каналов,              |                       |
|                       | соответ-ственно       |                       |
+-----------------------+-----------------------+-----------------------+
| 6                     | Относительная         | q                     |
|                       | пропускная            |                       |
|                       | способность СМО       |                       |
+-----------------------+-----------------------+-----------------------+
| 7                     | Абсолютная пропускная | A                     |
|                       | способность СМО       |                       |
+-----------------------+-----------------------+-----------------------+
| 8                     | Вероятностьтого,чтоза | :math:`P_{serv}`      |
|                       | явкабудетобслужена    |                       |
+-----------------------+-----------------------+-----------------------+
| 9                     | Вероятность того, что | :math:`P_{otk}`       |
|                       | заявка получит отказ  |                       |
+-----------------------+-----------------------+-----------------------+
| 10                    | Среднее число занятых | :math:`\bar k`        |
|                       | каналов               |                       |
+-----------------------+-----------------------+-----------------------+

Постановка задачи

Параметры n, :math:`\lambda` и :math:`\mu` известны.

Требуется найти :math:`\rho`, :math:`p_0, p_1, ..., p_n`,
:math:`P_{otk}`, q, A, :math:`P_{serv}`, :math:`\bar k`.

Формулы для расчетов

Приведенная интенсивность потока заявок вычисляется по формуле

:math:`\rho`\ =\ :math:`\frac{\lambda}{\mu}`

Вероятности :math:`p_0, p_1, ..., p_n` вычисляются по формулам Эрланга:

.. math::

   \begin{cases}
                 $ $p_0$=($\sum_{k=0}^{k=n} \frac{\rho^k}{k!})^{-1}$,$\\
                 $ $p_k$=$\frac{\rho^k}{k!} \cdot p_0, k=\overline{1,n}$ ,$\\
               \end{cases}

Поскольку заявка получает отказ, если все каналы обслуживания заняты, то

:math:`P_{otk}`\ =\ :math:`p_n`\ =\ :math:`\frac{\rho^n}{n!} \cdot p_0`.

Кроме того,

| q=1-\ :math:`P_{otk}`\ =1-\ :math:`\frac{\rho^n}{n!} \cdot p_0`,
| A=\ :math:`\lambda`\ q=\ :math:`\lambda(1-\frac{\rho^n}{n!} \cdot p_0`),
| :math:`P_{serv}`\ =1-\ :math:`P_{otk}`\ =q,
| :math:`\bar k`\ =\ :math:`\frac{A}{\mu}`\ =\ :math:`\rho \cdot (1-\frac{\rho^n}{n!} \cdot p_0)`.

Расчет показателей эффективности одноканальной СМО с ограниченной очередью
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Список используемых терминов и обозначений

+-----------------------+-----------------------+-----------------------+
| №                     | Термин                | Обозначение           |
+=======================+=======================+=======================+
| 1                     | Длина очереди         | m (m>0)               |
+-----------------------+-----------------------+-----------------------+
| 2                     | Интенсивность         | :math:`\lambda`       |
|                       | входящего потока      |                       |
|                       | заявок                |                       |
+-----------------------+-----------------------+-----------------------+
| 3                     | Интенсивностьвыходяще | :math:`\mu`           |
|                       | гопотокаобслуженныхза |                       |
|                       | явок                  |                       |
+-----------------------+-----------------------+-----------------------+
| 4                     | Приведенная           | :math:`\rho`          |
|                       | интенсивность потока  |                       |
|                       | заявок                |                       |
+-----------------------+-----------------------+-----------------------+
| 5                     | Вероятность того, что | :math:`p_0`           |
|                       | СМО свободна и может  |                       |
|                       | обслужить заявку      |                       |
+-----------------------+-----------------------+-----------------------+
| 6                     | Вероятность того, что | :math:`p_1`           |
|                       | СМО занята, а в       |                       |
|                       | очереди нет заявок    |                       |
+-----------------------+-----------------------+-----------------------+
| 7                     | Вероятности того, что | :math:`p_2, ..., p_{m |
|                       | СМО занята            | +1}, ...`             |
+-----------------------+-----------------------+-----------------------+
| 8                     | Относительная         | q                     |
|                       | пропускная            |                       |
|                       | способность СМО       |                       |
+-----------------------+-----------------------+-----------------------+
| 9                     | Абсолютная пропускная | A                     |
|                       | способность СМО       |                       |
+-----------------------+-----------------------+-----------------------+
| 10                    | Вероятность того, что | :math:`P_{serv}`      |
|                       | заявка будет          |                       |
|                       | обслужена             |                       |
+-----------------------+-----------------------+-----------------------+
| 11                    | Вероятность того, что | :math:`P_{otk}`       |
|                       | заявка получит отказ  |                       |
+-----------------------+-----------------------+-----------------------+
| 12                    | Среднее число заявок, | :math:`\bar r`        |
|                       | стоящих в очереди     |                       |
+-----------------------+-----------------------+-----------------------+
| 13                    | Среднее число заявок  | :math:`\bar k`        |
|                       | в СМО (обслуживаемых  |                       |
|                       | и стоящих в очереди)  |                       |
+-----------------------+-----------------------+-----------------------+
| 14                    | Среднее время         | :math:`\bar t_{wait}` |
|                       | ожидания заявки в     |                       |
|                       | очереди               |                       |
+-----------------------+-----------------------+-----------------------+
| 15                    | Среднее время         | :math:`\bar t_{CMO}`  |
|                       | пребывания заявки в   |                       |
|                       | СМО                   |                       |
+-----------------------+-----------------------+-----------------------+

Постановка задачи

Параметры m, :math:`\lambda` и :math:`\mu` известны.

Требуется найти :math:`\rho`, :math:`p_0`, :math:`p_1`, :math:`p_2`,
..., :math:`p_{m+1}`, q, A, :math:`P_{serv}`, :math:`P_{otk}`,
:math:`\bar r`, :math:`\bar k`, :math:`\bar t_{wait}`,
:math:`\bar t_{CMO}`.

Формулы для расчетов

Приведенная интенсивность потока заявок вычисляется, как и в предыдущих
параграфах, по формуле

:math:`\rho`\ =\ :math:`\frac{\lambda}{\mu}`.

Вероятности :math:`p_0`, :math:`p_1`, ..., :math:`p_{m+1}` вычисляются
по следующим формулам:

.. math::

   \begin{cases}
                 $ $p_0$=$\left\{
                   \begin{array}{c}
                       \frac{1-\rho}{1-\rho^{m+2}}, \rho \neq 1, \\
                       \frac{1}{m+2}, \rho=1, \\
                       \end{array}
                       \right.$,$\\
                 $ $p_k$=$\frac{\rho^k}{k!} \cdot p_0, k=\overline{1,n}$ ,$\\
               \end{cases}

Поскольку заявка получает отказ, если СМО занята, а в очереди находятся
m заявок, то

:math:`P_{otk}`\ =\ :math:`p_{m+1}`,

Далее получаем

| q=\ :math:`P_{serv}`\ =1- :math:`P_{otk}`\ =1-\ :math:`p_{m+1}`,
| A=\ :math:`\lambda`\ q.

Кроме того, справедливы формулы

| :math:`\bar r`\ =\ :math:`\left\{
                  \begin{array}{c}
               \frac{\rho^2[1-\rho^m(m+1=m\rho)]}{(1-\rho^{m+2})(1-\rho)}, \rho \neq 1, \\
              \frac{m(m+1)}{2(m+2)}, \rho=1, \\
                      \end{array}
                      \right.`,

| :math:`\bar k`\ =\ :math:`\bar r`\ +1-\ :math:`p_0`,
| :math:`\bar t_{wait}`\ =\ :math:`\frac{\bar r}{\lambda}`,
| :math:`\bar t_{CMO}`\ =\ :math:`\frac{\bar r}{\lambda}`\ +\ :math:`\frac{q}{\mu}`.

Расчет показателей эффективности одноканальной СМО с неограниченной очередью
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Список используемых терминов и обозначений

+-----------------------+-----------------------+-----------------------+
| №                     | Термин                | Обозначение           |
+=======================+=======================+=======================+
| 1                     | Длина очереди         | :math:`\infty`        |
+-----------------------+-----------------------+-----------------------+
| 2                     | Интенсивность         | :math:`\lambda`       |
|                       | входящего потока      |                       |
|                       | заявок                |                       |
+-----------------------+-----------------------+-----------------------+
| 3                     | Интенсивностьвыходяще | :math:`\mu`           |
|                       | гопотокаобслуженныхза |                       |
|                       | явок                  |                       |
+-----------------------+-----------------------+-----------------------+
| 4                     | Приведенная           | :math:`\rho`          |
|                       | интенсивность потока  |                       |
|                       | заявок                |                       |
+-----------------------+-----------------------+-----------------------+
| 5                     | Вероятность того, что | :math:`p_0`           |
|                       | СМО свободна и может  |                       |
|                       | обслужить заявку      |                       |
+-----------------------+-----------------------+-----------------------+
| 6                     | Вероятность того, что | :math:`p_1`           |
|                       | СМО занята, а в       |                       |
|                       | очереди нет заявок    |                       |
+-----------------------+-----------------------+-----------------------+
| 7                     | Вероятности того, что | :math:`p_2, ..., p_{m |
|                       | СМО занята            | +1}, ...`             |
+-----------------------+-----------------------+-----------------------+
| 8                     | Относительная         | q                     |
|                       | пропускная            |                       |
|                       | способность СМО       |                       |
+-----------------------+-----------------------+-----------------------+
| 9                     | Абсолютная пропускная | A                     |
|                       | способность СМО       |                       |
+-----------------------+-----------------------+-----------------------+
| 10                    | Вероятность того, что | :math:`P_{serv}`      |
|                       | заявка будет          |                       |
|                       | обслужена             |                       |
+-----------------------+-----------------------+-----------------------+
| 11                    | Вероятность того, что | :math:`P_{otk}`       |
|                       | заявка получит отказ  |                       |
+-----------------------+-----------------------+-----------------------+
| 12                    | Среднее число заявок, | :math:`\bar r`        |
|                       | стоящих в очереди     |                       |
+-----------------------+-----------------------+-----------------------+
| 13                    | Среднее число заявок  | :math:`\bar k`        |
|                       | в СМО (обслуживаемых  |                       |
|                       | и стоящих в очереди)  |                       |
+-----------------------+-----------------------+-----------------------+
| 14                    | Среднее время         | :math:`\bar t_{wait}` |
|                       | ожидания заявки в     |                       |
|                       | очереди               |                       |
+-----------------------+-----------------------+-----------------------+
| 15                    | Среднее время         | :math:`\bar t_{CMO}`  |
|                       | пребывания заявки в   |                       |
|                       | СМО                   |                       |
+-----------------------+-----------------------+-----------------------+

Постановка задачи

Параметры m, :math:`\lambda` и :math:`\mu` известны.

Требуется найти :math:`\rho`, :math:`p_0`, :math:`p_1`, :math:`p_2`,
..., :math:`p_{m+1}`, q, A, :math:`P_{serv}`,
:math:`P_{otk}`,\ :math:`\bar r`, :math:`\bar k`, :math:`\bar t_{wait}`,
:math:`\bar t_{CMO}`.

Формулы для расчетов

Приведенная интенсивность потока заявок вычисляется, как и в предыдущих
параграфах, по формуле

:math:`\rho`\ =\ :math:`\frac{\lambda}{\mu}`\ <1.

Если в формулах, предыдущего параграфа, перейти к пределу при
:math:`m \to \infty`, то мы получим следующие формулы:

:math:`\left\{
                \begin{array}{c}
                    p_0=1-\rho,\\
                    p_k=\rho^k \cdot p_0, k=1,2, ... \\
                    \end{array}
                    \right.`

В случае очереди бесконечной длины каждая заявка, в конце концов, будет
обслужена. Следовательно,

| :math:`P_{otk}`\ =0,
| q=1=\ :math:`P_{serv}`,
| A=\ :math:`\lambda`

Кроме того, справедливы формулы

| :math:`\bar r`\ =\ :math:`\frac{\rho^2}{1-\rho}`,
| :math:`\bar k`\ =\ :math:`\frac{\rho}{1-\rho}`,
| :math:`\bar t_{wait}`\ =\ :math:`\frac{\rho^2}{\lambda(1-\rho)}`,
| :math:`\bar t_{CMO}`\ =\ :math:`\frac{1}{\mu(1-\rho)}`.

Практическое применение теории СМО
----------------------------------

Пример решения задачи СМО
~~~~~~~~~~~~~~~~~~~~~~~~~

**Пример:**

На вход многоканальной СМО с отказами поступает поток заявок,
интенсивность которого составляет 11 заявок/час. Среднее время
обслуживания одной заявки 0,15 часа. Каждая заявка приносит доход 130
руб., а содержание одного канала обходится в 122 руб./час. Найти
оптимальное число каналов СМО.

**Решение:**

Воспользовавшись данными из условия задачи, проведем следующие
вычисления

| :math:`\lambda`\ =11 заявок/час,
| :math:`\mu`\ =\ :math:`\frac{1}{0,15}`\ =6,67 заявок/час,
| :math:`\rho`\ =\ :math:`\frac{\lambda}{\mu}=\frac{11}{6,667}`\ =1,65.

Из условия задачи также вытекает, что в случае, если СМО имеет n
каналов, то она приносит доход D=D(n), который можно определить по
формуле

D=130\ :math:`\cdot`\ A-122\ :math:`\cdot`\ n,

где A= A(n) - абсолютная пропускная способность СМО.

В случае, когда число каналов n=1 получаем

| :math:`p_0`\ =(1+\ :math:`\rho)^{-1}=(1+1,65)^{-1}`\ =0,38,
| A=\ :math:`\lambda`\ (1-:math:`\rho \cdot p_0`)=11\ :math:`\cdot`\ (1-1,65:math:`\cdot`\ 0,38)=4,1,
| D=130\ :math:`\cdot`\ A-122\ :math:`\cdot`\ n=130\ :math:`\cdot`\ 4,1-122=411
  руб./час.

При n=2

| :math:`p_0`\ =(1+\ :math:`\rho+\frac{\rho^2}{2!})^{-1}=(1+1,65+\frac{1,65^2}{2})^{-1}`\ =0,25,
| A=\ :math:`\lambda`\ (1-:math:`\frac{\rho^2}{2!} \cdot p_0`)=11\ :math:`\cdot`\ (1-:math:`\frac{1,65^2}{2}`
  :math:`\cdot`\ 0,25)=7,26,
| D=130\ :math:`\cdot`\ A-122\ :math:`\cdot`\ n=130\ :math:`\cdot`\ 7,26-122\ :math:`\cdot`\ 2=699,8
  руб./час.

При n=3

| :math:`p_0`\ =(1+\ :math:`\rho+\frac{\rho^2}{2!}+\frac{\rho^3}{3!})^{-1}=(1+1,65+\frac{1,65^2}{2}+\frac{1,65^3}{6})^{-1}`\ =0,21,
| A=\ :math:`\lambda`\ (1-:math:`\frac{\rho^3}{3!} \cdot p_0`)=11\ :math:`\cdot`\ (1-:math:`\frac{1,65^3}{6}`
  :math:`\cdot`\ 0,21)=9,27,
| D=130\ :math:`\cdot`\ A-122\ :math:`\cdot`\ n=130\ :math:`\cdot`\ 9,27-122\ :math:`\cdot`\ 3=839,1
  руб./час.

При n=4

| :math:`p_0`\ =(1+\ :math:`\rho+\frac{\rho^2}{2!}+\frac{\rho^3}{3!}+\frac{\rho^4}{4!})^{-1}=(1+1,65+\frac{1,65^2}{2}+\frac{1,65^3}{6}+\frac{1,65^4}{24})^{-1}`\ =0,20,
| A=\ :math:`\lambda`\ (1-:math:`\frac{\rho^4}{4!} \cdot p_0`)=11\ :math:`\cdot`\ (1-:math:`\frac{1,65^4}{24}`
  :math:`\cdot`\ 0,20)=10,32,
| D=130\ :math:`\cdot`\ A-122\ :math:`\cdot`\ n=130\ :math:`\cdot`\ 10,32-122\ :math:`\cdot`\ 4=853,6
  руб./час.

При n=5

| :math:`p_0`\ =(1+\ :math:`\rho+\frac{\rho^2}{2!}+\frac{\rho^3}{3!}+\frac{\rho^4}{4!}+\frac{\rho^5}{5!})^{-1}=(1+1,65+\frac{1,65^2}{2}+\frac{1,65^3}{6}+\frac{1,65^4}{24}+\frac{1,65^5}{120})^{-1}`\ =0,19,
| A=\ :math:`\lambda`\ (1-:math:`\frac{\rho^5}{5!} \cdot p_0`)=11\ :math:`\cdot`\ (1-:math:`\frac{1,65^5}{120}`
  :math:`\cdot`\ 0,19)=10,79,
| D=130\ :math:`\cdot`\ A-122\ :math:`\cdot`\ n=130\ :math:`\cdot`\ 10,79-122\ :math:`\cdot`\ 5=792,7
  руб./час.

Сравнивая доходы, поступающие от СМО в случаях n=1,2,3,4,5, замечаем,
что при увеличении числа каналов от одного до четырех доход растет и при
n=4 становится наибольшим. Это значение и является оптимальным.

**Ответ:** Оптимальным является наличие в СМО 4-х каналов.

.. raw:: latex

   \newpage

Теория игр
==========

Элементы теории игр
-------------------

Матричные игры с нулевой суммой. Платежная матрица игры
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Во многих практических задачах возникают ситуации, когда требуется
принять решение, не имея достаточной информации. Неизвестными могут быть
как условия осуществления какой-либо операции, так и сознательные
действия лиц, от которых зависит успех этой операции.

-  Ситуации, в которых сталкиваются интересы двух сторон и результат
   любой операции, осуществляемой одной из сторон, зависит от действий
   другой стороны, называются конфликтными;

-  Математическая модель конфликтной ситуации называется игрой, а
   математическая теория, помогающая принимать рациональные решения в
   конфликтной ситуации, - теорией игр;

-  Конфликтующие стороны называются игроками, а действия, которые могут
   выполнять игроки, - стратегиями;

   От реальной ситуации игра отличается тем, что в игре противники
   действуют по строго определенным правилам.

-  | Матричной игрой называется игра, осуществляемая по следующим
     правилам:
   | 1. В игре участвуют два игрока;
   | 2. Каждый из игроков обладает конечным набором стратегий;
   | 3. Игра заключается в том, что каждый из игроков, не имея
     информации о действиях противника, делает один ход (выбирает одну
     из своих стратегий). Результатом выбора игроками стратегий является
     выигрыш и проигрыш в игре.
   | 4. И выигрыш, и проигрыш выражаются числами.

-  Матричная игра называется игрой с нулевой суммой, если в этой игре
   выигрыш одного игрока равняется проигрышу другого игрока.

   Каждая матричная игра с нулевой суммой имеет платежную матрицу. Для
   того чтобы построить эту матрицу, обозначим одного из игроков
   символом A, а другого - символом B, и предположим, что :math:`A_1`,
   :math:`A_2`, ..., :math:`A_m` - стратегии, которые может применять
   игрок A, а :math:`B_1`, :math:`B_2`, ..., :math:`B_n` - стратегии,
   которые может применять игрок B.

-  Матричная игра, в которой у игрока A имеется m стратегий, а у игрока
   B - n стратегий, называется игрой типа m\ :math:`\times`\ n.

   Рассмотрим матрицу

   .. math::

      C=\left( 
              \begin{array}{cccc}
                  c_{11} & c_{12} & \ldots & c_{1n}\\
                  c_{21} & c_{22} & \ldots & c_{2n}\\
                  \vdots & \vdots & \ddots & \vdots\\
                  c_{m1} & c_{m2} & \ldots & c_{mn}
              \end{array}
              \right)

   у которой элементы :math:`c_{ij}` (i=1,2,...,m; j=1,2,...,n) равны
   выигрышам игрока A (и проигрышам игрока B) при применении игроками
   стратегий :math:`A_i` и :math:`B_j` соответственно.

-  Матрица C называется платежной матрицей игры.

**Пример:**

Игра, называемая «Открывание пальцев», заключается в следующем. Два
игрока одновременно из сжатого кулака правой руки открывают по нескольку
пальцев. Общее количество открытых пальцев является суммой выигрыша,
причем, если общее количество открытых пальцев четно, то выигрывает
первый игрок, если же общее количество открытых пальцев нечетно, то
выигрывает второй игрок.

Составить платежную матрицу игры.

**Решение:**

Поскольку каждый из игроков может открыть 1, 2, 3, 4 или 5 пальцев, то у
каждого из них имеется по 5 соответствующих стратегий: стратегии
:math:`A_1`,\ :math:`A_2`,\ :math:`A_3`,\ :math:`A_4`,\ :math:`A_5` у
первого игрока,и
:math:`B_1`,\ :math:`B_2`,\ :math:`B_3`,\ :math:`B_4`,\ :math:`B_5` - у
второго. Таким образом, рассматриваемая игра является матричной игрой
типа 5\ :math:`\times`\ 5, и можно составить таблицу выигрышей, в
зависимости от стратегий, применяемых игроками (Таблица 1):

*Таблица 1*

.. raw:: latex

   \centering

+-------------+-------------+-------------+-------------+-------------+-------------+
|             | :math:`B_1` | :math:`B_2` | :math:`B_3` | :math:`B_4` | :math:`B_5` |
+-------------+-------------+-------------+-------------+-------------+-------------+
| :math:`A_1` | 2           | 3           | 4           | 5           | 6           |
+-------------+-------------+-------------+-------------+-------------+-------------+
| :math:`A_2` | 3           | 4           | 5           | 6           | 7           |
+-------------+-------------+-------------+-------------+-------------+-------------+
| :math:`A_3` | 4           | 5           | 6           | 7           | 8           |
+-------------+-------------+-------------+-------------+-------------+-------------+
| :math:`A_4` | 5           | 6           | 7           | 8           | 9           |
+-------------+-------------+-------------+-------------+-------------+-------------+
| :math:`A_5` | 6           | 7           | 8           | 9           | 10          |
+-------------+-------------+-------------+-------------+-------------+-------------+

Из таблицы 1 следует, что платежная матрица игры имеет вид

.. math::

   C=\left( 
           \begin{array}{ccccc}
               2 & 3 & 4 & 5 & 6\\
               3 & 4 & 5 & 6 & 7\\
               4 & 5 & 6 & 7 & 8\\
               5 & 6 & 7 & 8 & 9\\
               6 & 7 & 8 & 9 & 10
           \end{array}
           \right)

Нижняя и верхняя цена игры. Принцип минимакса
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Рассмотрим матричную игру типа m\ :math:`\times`\ n с платежной матрицей

.. math::

   C=\left( 
           \begin{array}{cccc}
               c_{11} & c_{12} & \ldots & c_{1n}\\
               c_{21} & c_{22} & \ldots & c_{2n}\\
               \vdots & \vdots & \ddots & \vdots\\
               c_{m1} & c_{m2} & \ldots & c_{mn}
           \end{array}
           \right)

Если игрок A выберет стратегию :math:`A_i`, то все его возможные
выигрыши будут элементами i-й строки матрицы C. В наихудшем для игрока A
случае, когда игрок B применяет стратегию, соответствующую минимальному
элементу этой строки, выигрыш игрока A будет равен числу min
:math:`c_{ij}`, 1\ :math:`\leq`\ j\ :math:`\leq`\ n.

Следовательно, для получения наибольшего выигрыша, игроку A нужно
выбирать ту из стратегий, для которой число min :math:`c_{ij}`
(1:math:`\leq`\ j\ :math:`\leq`\ n) максимально.

-  Число

   :math:`\alpha`\ =max min :math:`c_{ij}`,
   1\ :math:`\leq`\ i\ :math:`\leq`\ m,
   1\ :math:`\leq`\ j\ :math:`\leq`\ n

называется нижней ценой игры, а стратегия игрока A, соответствующая
наибольшему из чисел min :math:`c_{ij}`
(1:math:`\leq`\ j\ :math:`\leq`\ n), называется максиминной.

Таким образом, если игрок A будет придерживаться максиминной стратегии,
то ему гарантирован выигрыш, не меньший, чем :math:`\alpha`, при любом
поведении игрока В.

Проанализируем теперь платежную матрицу с точки зрения игрока B,
заинтересованного в том, чтобы игрок A выиграл, как можно меньше.

Если игрок B выберет стратегию :math:`B_j`, то все возможные выигрыши
игрока A будут элементами j-го столбца платежной матрицы С. В наихудшем
для игрока B случае, когда игрок A применяет стратегию, соответствующую
максимальному элементу этого столбца, выигрыш игрока B будет равен числу
max :math:`c_{ij}` (1:math:`\leq`\ i\ :math:`\leq`\ m).

Следовательно, игроку B нужно выбрать такую стратегию, для которой число
max :math:`c_{ij}` (1:math:`\leq`\ i\ :math:`\leq`\ m) минимально.

-  Число

   :math:`\beta`\ =min max :math:`c_{ij}`,
   1\ :math:`\leq`\ i\ :math:`\leq`\ m,
   1\ :math:`\leq`\ j\ :math:`\leq`\ n

называется верхней ценой игры, а стратегия игрока B, соответствующая
наименьшему из чисел max :math:`c_{ij}`
(1:math:`\leq`\ i\ :math:`\leq`\ m), называется минимаксной.

Таким образом, если игрок B применяет минимаксную стратегию, то игрок A
не может выиграть больше, чем :math:`\beta`.

-  Принцип осторожности, заставляющий игроков придерживаться максиминной
   и минимаксной стратегий соответственно, называют «Принципом
   минимакса», а минимаксную стратегию и максиминную стратегию называют
   общим термином «Минимаксные стратегии».

**Пример:**

Найти нижнюю и верхнюю цены игры с платежной матрицей.

.. math::

   C=\left( 
           \begin{array}{cccc}
               3 & 2 & 1 & 4\\
               10 & 4 & 3 & 10\\
               -2 & 4 & 1 & 2
           \end{array}
           \right)

**Решение:**

В каждой строке платежной матрицы найдем наименьший элемент, и запишем
его справа от матрицы. В каждом столбце платежной матрицы найдем
наибольший элемент, и запишем его снизу от матрицы. В результате получим
таблицу

.. math::

   \left(
           \begin{array}{cccc}
               3 & 2 & 1 & 4 \\
               10 & 4 & 3 & 10 \\
               -2 & 4 & 1 & 2 
           \end{array}
           \right)
            \begin{array}{cc}
               & 1 \\
               &3 \\
               &-2 
           \end{array}

.. math::

   \begin{array}{ccccccc}
               10 & 4 & 3 & 10 &  & & 
           \end{array}

Нижняя цена игры

:math:`\alpha`\ =max{1,3,-2}=3.

Верхняя цена игры

:math:`\beta`\ =min{10,4,3,10}=3.

Игры с седловой точкой
----------------------

Игра называется игрой с седловой точкой, если ее нижняя и верхняя цены
совпадают, то есть выполняется равенство

:math:`\alpha`\ =max min :math:`c_{ij}`\ =min max
:math:`c_{ij}`\ =\ :math:`\beta`, 1\ :math:`\leq`\ i\ :math:`\leq`\ m,
1\ :math:`\leq`\ j\ :math:`\leq`\ n

Для игры с седловой точкой общее значение нижней и верхней цены игры

V=\ :math:`\alpha`\ =\ :math:`\beta`

называется ценой игры.

Замечание 1. В Примере нижняя и верхняя цены игры совпадают и равны 3,
т.е. рассмотренная игра является игрой с седловой точкой.

Замечание 2. Максиминной стратегией в Примере является стратегия
:math:`A_2`, минимаксной стратегией является стратегия :math:`B_3`.

Рассмотрим теперь для игры с седловой точкой такой элемент платежной
матрицы :math:`c_{i_0j_0}`, который соответствует минимаксным стратегиям
:math:`A_{i_0}` и :math:`B_{j_0}`. Этот элемент является одновременно
минимальным в своей строке и максимальным в своем столбце, и выполняются
неравенства

V=\ :math:`\alpha`\ =max :math:`c_{ij_0}`\ =min
:math:`c_{i_{0}j}`\ =\ :math:`\beta`,
1\ :math:`\leq`\ j\ :math:`\leq`\ m

Следовательно, выполняется равенство :math:`c_{i_0j_0}`\ =V.

Элемент платежной матрицы :math:`c_{i_0j_0}` называется седловой точкой.

В Примере седловой точкой является элемент :math:`c_{23}` платежной
матрицы. Этот элемент равен 3 и, конечно же, совпадает с ценой игры.

Игры без седловой точки
-----------------------

**Пример:** Найти нижнюю и верхнюю цены игры с платежной матрицей

.. math::

   C=\left( 
           \begin{array}{cccc}
               2 & 0 & -1 \\
               3 & 4 & 2 \\
               -2 & 1 & 0 \\
               5 & 1 & 5
           \end{array}
           \right)

**Решение:** Действуя аналогично предыдущему Примеру, получаем

.. math::

   \left(
           \begin{array}{ccc}
               2 & 0 & -1 \\
               3 & 4 & 2 \\
               -2 & 1 & 0 \\
               5 & 1 & 5 
           \end{array}
           \right)
            \begin{array}{cc}
               &  -1 \\
               &2 \\
               &-2 \\
               &1
           \end{array}

.. math::

   \begin{array}{cccccccc}
               5& 4 &  5 & & &
           \end{array}

Нижняя цена игры

:math:`\alpha`\ =max{-1,2,-2,1}=2.

Верхняя цена игры

:math:`\beta`\ =min{5,4,5}=4

Замечание 1. В Примере нижняя цена игры отличается от верхней цены игры,
следовательно, игра является игрой без седловой точки. Максиминной
стратегией является стратегия :math:`A_2`. Минимаксной стратегией
является стратегия :math:`B_2`.

Замечание 2. Для любой игры без седловой точки выполнено неравенство
:math:`\alpha`\ <:math:`\beta`.

Игры, повторяемые многократно. Смешанные стратегии
--------------------------------------------------

Если партнеры играют только один раз, то игрокам целесообразно
придерживаться принципа минимакса, как в игре с седловой точкой, так и в
игре без седловой точки.

В случае многократного повторения игры с седловой точкой игрокам также
целесообразно придерживаться принципа минимакса.

Если же многократно повторяется игра без седловой точки, то постоянное
использование минимаксных стратегий становится невыгодным.

Действительно, в игре без седловой точки элемент платежной матрицы
:math:`c_{i_0j_0}`, соответствующий минимаксной стратегии игрока A, не
обязан быть минимальным в своей строке. Следовательно, игрок B, зная о
том, что игрок A в следующей игре будет использовать минимаксную
стратегию :math:`A_{i_0}`, может выбрать стратегию, отвечающую
минимальному элементу строки :math:`i_0`. В результате выигрыш игрока A
уменьшится от величины :math:`c_{i_0j_0}` до величины :math:`\alpha`.
Аналогично может поступить и игрок A, неожиданно применив против игрока
B стратегию, соответствующую максимальному элементу столбца :math:`j_0`.

Более того, доказано, что при многократно повторяемой игре без седловой
точки игроку A, для обеспечения среднего выигрыша, большего, чем
:math:`\alpha`, следует чередовать свои стратегии :math:`A_1`,
:math:`A_2`, ..., :math:`A_m`. Игроку B для улучшения результата также
целесообразно чередовать свои стратегии :math:`B_1`, :math:`B_2`, ...,
:math:`B_n`.

По этой причине для многократно повторяемых игр без седловой точки
вводится следующее определение.

В играх, которые повторяются многократно, каждая из стратегий
:math:`A_1`, :math:`A_2`, ..., :math:`A_m` называется чистой стратегией.

Стратегия игрока A, обозначаемая

.. math::

   S_A=\left( 
           \begin{array}{cccc}
               A_{1} & \ldots & A_{m}\\
               p_{1} & \ldots & p_{m}
           \end{array}
           \right)

и состоящая в том, чтобы применять чистые стратегии :math:`A_1`,
:math:`A_2`, ..., :math:`A_m` чередуя их по случайному закону с
частотами :math:`p_1`, ..., :math:`p_m` называется смешанной стратегией.
Частоты :math:`p_1`, ..., :math:`p_m` удовлетворяют соотношению

:math:`p_1`\ +\ :math:`p_2`\ +...+\ :math:`p_m`\ =1.

Чистые и смешанные стратегии игрока B определяются аналогично.

Замечание. Каждая чистая стратегия является частным случаем смешанной
стратегии, когда одна из стратегий применяется с частотой 1, а все
остальные - с частотой 0.

Смешанные стратегии, избранные игроками, называются оптимальными, если
одностороннее отклонение любым игроком от своей оптимальной стратегии
может изменить средний выигрыш только в сторону, невыгодную для этого
игрока.

Совокупность, состоящая из оптимальной стратегии одного игрока и
оптимальной стратегии другого игрока, называется решением игры.

Средний выигрыш V при применении обоими игроками оптимальных стратегий
называется ценой игры.

Стратегии, входящие с ненулевыми частотами в оптимальную стратегию
игрока, называются полезными.

В 1928 году фон Нейманом была доказана основная теорема теории игр,
утверждающая, что каждая игра имеет, по крайней мере, одно решение,
возможно, в области смешанных стратегий.

Поскольку все чистые стратегии являются частными случаями смешанных
стратегий, то из основной теоремы теории игр можно получить

Следствие 1. Любая игра имеет цену.

Следствие 2. Цена игры удовлетворяет неравенству
:math:`\alpha`\ :math:`\leq`\ V\ :math:`\leq`\ :math:`\beta`.

Следствие 3. Средний выигрыш остается равным цене игры, если один из
игроков придерживается своей оптимальной стратегии, а другой игрок
применяет свои полезные стратегии с любыми частотами.

Аналитический метод решения игры типа 2\ :math:`\times`\ 2
----------------------------------------------------------

Рассмотрим игру без седловой точки типа 2\ :math:`\times`\ 2 с платежной
матрицей

.. math::

   C=\left( 
           \begin{array}{cc}
               c_{11} & c_{12} \\
               c_{21} & c_{22} 
           \end{array}
           \right)

и найдем оптимальную стратегию

.. math::

   S_A=\left( 
           \begin{array}{cc}
               A_1 & A_2 \\
               p_1 & p_2 
           \end{array}
           \right)

игрока A. Согласно следствию 3 из основной теоремы теории игр эта
стратегия обеспечивает игроку A выигрыш, равный цене игры V, даже если
игрок B не выходит за пределы своих полезных стратегий. В данной игре
обе чистые стратегии игрока B являются полезными, поскольку в противном
случае игра имела бы решение в области чистых стратегий, т.е. была бы
игрой с седловой точкой.

Отсюда вытекает, что неизвестные :math:`p_1`, :math:`p_2`, V
удовлетворяют следующей системе из трех линейных уравнений

.. math::

   \left\{\begin{matrix}
               c_{11}p_1+c_{21}p_2=V, \\ 
               c_{12}p_1+c_{22}p_2=V, \\
               p_1+p_2=1, \\
           \end{matrix}\right.

решение которой имеет вид

.. math::

   \left\{\begin{matrix}
               p_1=\frac{c_{22}-c_{21}}{c_{11}+c_{22}-c_{12}-c_{21}}, \\ 
               p_2=\frac{c_{11}-c_{12}}{c_{11}+c_{22}-c_{12}-c_{21}}, \\
               V=\frac{c_{11}\cdot c_{22}-c_{12}\cdot c_{21}}{c_{11}+c_{22}-c_{12}-c_{21}}, \\
           \end{matrix}\right.

Аналогичным образом можно найти оптимальную стратегию

.. math::

   S_B=\left( 
           \begin{array}{cc}
               B_1 & B_2 \\
               q_1 & q_2 
           \end{array}
           \right)

игрока B. В этом случае неизвестные :math:`q_1`, :math:`q_2`, V
удовлетворяют системе уравнений

.. math::

   \left\{\begin{matrix}
               c_{11}q_1+c_{12}q_2=V, \\ 
               c_{21}q_1+c_{22}q_2=V, \\
               q_1+q_2=1, \\
           \end{matrix}\right.

решение которой имеет вид

.. math::

   \left\{\begin{matrix}
               q_1=\frac{c_{22}-c_{12}}{c_{11}+c_{22}-c_{12}-c_{21}}, \\ 
               q_2=\frac{c_{11}-c_{21}}{c_{11}+c_{22}-c_{12}-c_{21}}, \\
               V=\frac{c_{11}\cdot c_{22}-c_{12}\cdot c_{21}}{c_{11}+c_{22}-c_{12}-c_{21}}, \\
           \end{matrix}\right.

Применим теперь полученные формулы к карточной игре типа "веришь - не
веришь". **Пример:** Имеются две карты: туз и двойка. Игрок А наугад
берет одну из них. Если А взял туза, то он заявляет: "У меня туз" и
требует у противника рубль. Если же А взял двойку, то он может либо
сказать: "У меня туз" и потребовать рубль, либо признаться, что у него
двойка и заплатить рубль. Игрок В, если ему предлагают рубль, берет его.
Однако, если у него требуют рубль, то В может либо поверить, что у А
туз, и заплатить рубль, либо не верить и потребовать проверки. Если в
результате проверки окажется, что у А действительно туз, то В платит 2
рубля. Если же выяснится, что у А была двойка, то А платит 2 рубля.

Найти оптимальные стратегии для каждого из игроков.

**Решение:** У игрока A есть 2 стратегии: :math:`A_1` - обманывать,
:math:`A_2` - не обманывать. У игрока В тоже есть 2 стратегии:
:math:`B_1` - верить, :math:`B_2` - не верить. Это позволяет найти все
элементы платежной матрицы игры, вычислив средний выигрыш для каждой
комбинации стратегий.

1.\ :math:`\qquad` Комбинация :math:`A_1B_1` (А обманывает, В верит).

Если А берет туза (вероятностью этого 0,5), то он требует рубль. В верит
ему и платит. Если А берет двойку (вероятность этого также 0,5), то он
обманывает и тоже требует рубль. В верит ему и платит. Средний выигрыш А
равен :math:`c_{11}`\ =1\ :math:`\cdot`\ 0,5+1\ :math:`\cdot`\ 0,5=1.

2.\ :math:`\qquad` Комбинация :math:`A_1B_2` (А обманывает, В не верит).

Если А берет туза, то он требует рубль, а В не верит и после проверки
платит 2 рубля. Если же А взял двойку, то он обманывает и тоже требует
рубль. В не верит ему, и в результате А платит 2 рубля. Средний выигрыш
А равен
:math:`c_{12}`\ =2\ :math:`\cdot`\ 0,5+(-2)\ :math:`\cdot`\ 0,5=0.

3.\ :math:`\qquad` Комбинация :math:`A_2B_1` (А не обманывает, В верит).

Если А берет туза, то он требует рубль, В платит 1 рубль. Если А берет
двойку, то он сообщает об этом и платит рубль. Средний выигрыш А равен
:math:`c_{21}`\ =1\ :math:`\cdot`\ 0,5+(-1)\ :math:`\cdot`\ 0,5=0.

4.\ :math:`\qquad` Комбинация :math:`A_2B_2` (А не обманывает, В не
верит).

Если А берет туза, то он требует рубль, В проверяет и платит 2 рубля.
Если А берет двойку, то он сообщает об этом и платит рубль. Средний
выигрыш А равен
:math:`c_{22}`\ =2\ :math:`\cdot`\ 0,5+(-1)\ :math:`\cdot`\ 0,5=0,5.

Отсюда вытекает, что платежная матрица имеет вид

.. math::

   C=\left( 
           \begin{array}{cc}
               c_{11} & c_{12} \\
               c_{21} & c_{22} 
           \end{array}
           \right)
           =\left( 
           \begin{array}{cc}
               1 & 0 \\
               0 & 0,5 
           \end{array}
           \right)

и можно найти нижнюю и верхнюю цены игры:

:math:`\alpha`\ =max min :math:`c_{ij}`\ =0,
1\ :math:`\leq`\ i\ :math:`\leq`\ 2,
1\ :math:`\leq`\ j\ :math:`\leq`\ 2,

:math:`\beta`\ =min max :math:`c_{ij}`\ =0,5 ,
1\ :math:`\leq`\ i\ :math:`\leq`\ 2,
1\ :math:`\leq`\ j\ :math:`\leq`\ 2.

Следовательно, игра не имеет седловой точки, и ее решение нужно искать в
области смешанных стратегий. Для этого воспользуемся формулами,
полученными выше:

.. math::

   \left\{\begin{matrix}
               p_1=\frac{c_{22}-c_{21}}{c_{11}+c_{22}-c_{12}-c_{21}}=\frac{0,5}{1,5}=\frac{1}{3}, \\ 
               p_2=\frac{c_{11}-c_{12}}{c_{11}+c_{22}-c_{12}-c_{21}}=\frac{1}{1,5}=\frac{2}{3}, \\
               V=\frac{c_{11}\cdot c_{22}-c_{12}\cdot c_{21}}{c_{11}+c_{22}-c_{12}-c_{21}}=\frac{0,5}{1,5}=\frac{1}{3}. \\
           \end{matrix}\right.

Следовательно, смешанная стратегия игрока A имеет вид

.. math::

   S_A=\left( 
           \begin{array}{cc}
               A_1 & A_2 \\
               \frac{1}{3} & \frac{2}{3} 
           \end{array}
           \right)

Далее получаем

.. math::

   \left\{\begin{matrix}
               q_1=\frac{c_{22}-c_{12}}{c_{11}+c_{22}-c_{12}-c_{21}}=\frac{0,5}{1,5}=\frac{1}{3}, \\ 
               q_2=\frac{c_{11}-c_{21}}{c_{11}+c_{22}-c_{12}-c_{21}}, \\
           \end{matrix}\right.

.. math::

   S_B=\left( 
           \begin{array}{cc}
               B_1 & B_2 \\
               \frac{1}{3} & \frac{2}{3} 
           \end{array}
           \right)

Таким образом, оптимальным для А будет в одной трети случаев обманывать,
а в двух третях случаев - не обманывать. Такая тактика обеспечит ему
средний выигрыш, равный V=\ :math:`\frac{1}{3}`. Если бы А стал
пользоваться своей максиминной стратегией, то его выигрыш был бы равен
:math:`\alpha`\ =0.

Для В оптимальная стратегия - это в одной трети случаев верить А и
платить ему рубль, а в остальных случаях требовать проверки. В этой
ситуации его средний проигрыш составит :math:`\frac{1}{3}`, тогда как
при применении минимаксной стратегии он будет проигрывать в среднем
:math:`\beta`\ =0,5.

Значение V=\ :math:`\frac{1}{3}` показывает, что рассмотренная игра
выгодна для А и невыгодна для В, поскольку, пользуясь своей оптимальной
стратегией, A всегда может обеспечить себе положительный средний
выигрыш.

Графический метод решения игр типа 2\ :math:`\times`\ n и m\ :math:`\times`\ 2
------------------------------------------------------------------------------

Рассмотрим игру типа 2\ :math:`\times`\ n с платежной матрицей

.. math::

   C=\left( 
           \begin{array}{cccc}
               a_{11} & a_{12} & \ldots & a_{1n}\\
               a_{21} & a_{22} & \ldots & a_{2n}
           \end{array}
           \right)

и проведем через точку (1; 0) координатной плоскости Oxy прямую l,
перпендикулярную оси абсцисс. После этого для каждой из стратегий
:math:`B_i` (i=:math:`{\overline{1,n}}`) проведем прямую

:math:`(b_i): y=a_{1i}+(a_{2i}-a_{1i})x`,

соединяющую точку (0;:math:`a_{1i}`) на оси Оу с точкой
(0;:math:`a_{2i}`) на прямой l. Ось Оу отвечает за стратегию
:math:`A_1`, а прямая l - за стратегию :math:`A_2`.

|image|

Если игрок А применяет смешанную стратегию

.. math::

   S_A=\left( 
           \begin{array}{cccc}
               A_1 & A_2\\
               p_1 & p_2
           \end{array}
           \right)

то его выигрыш в случае, если противник применяет чистую стратегию
:math:`B_i`, равен

:math:`a_{1i}p_1+a_{2i}p_2=a_{1i}(1-p_2)+a_{2i}p_2`,

и этому выигрышу соответствует точка М на прямой :math:`b_i` с абсциссой
x=\ :math:`p_2`.

Ломаная :math:`b_1MNb_3`, отмеченная на чертеже жирной линией, позволяет
определить минимальный выигрыш игрока А при любом поведении игрока В.
Точка N, в которой эта ломаная достигает максимума, определяет решение и
цену игры. Ордината точки N равна цене игры V, а ее абсцисса :math:`p_2`
- частоте применения стратегии :math:`A_1` в оптимальной смешанной
стратегии игрока А.

Далее непосредственно по чертежу находим пару "полезных" стратегий
игрока В, пересекающихся в точке N (если в точке N пересекается более
двух стратегий, то выберем любые две из них). Пусть это будут стратегии
:math:`B_i` и :math:`B_j`. Поскольку выигрыш игрока А, если он
придерживается оптимальной стратегии, не зависит от того, в каких
пропорциях игрок В применяет эти стратегии, то неизвестные :math:`p_1`,
:math:`p_2`, V определяются из системы уравнений

.. math::

   \left\{\begin{matrix}
               a_{1i}p_1+a_{2i}p_2=V, \\ 
               a_{1j}p_1+a_{2j}p_2=V, \\
               p_1+p_2=1. 
           \end{matrix}\right.

Частоты :math:`q_1`, :math:`q_2` в оптимальной стратегии

.. math::

   S_B=\left( 
           \begin{array}{ccccccc}
               0 & \ldots & B_i & \ldots & B_j & \ldots & 0\\
               0 & \ldots & q_i & \ldots & q_j & \ldots & 0
           \end{array}
           \right)

игрока В определяются из соотношения

:math:`a_{1i}q_i+a_{1j}(1-q_i)=V`; (:math:`q_j=1-q_i`).

Замечание. Иногда точка N не является пересечением двух стратегий, а
попадает на одну из прямых х=0 или х=1. В этом случае решением игры
будут соответствующие чистые стратегии.

Для игры m\ :math:`\times`\ 2 решение находится совершенно аналогично.
Действи- тельно, поскольку выигрыш игрока А одновременно является
проигрышем игрока В, то для решения задачи нужно построить ломаную,
соответствую- щую верхней границе выигрыша игрока А, а затем найти на
ней точку с минимальной ординатой.

Практическое применение теории игр
----------------------------------

Пример решения задачи теории игр
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Пример:**

Пусть игра задана матрицей

.. math::

   C=\left( 
           \begin{array}{cccc}
               1 & 5 & 9 & 3 \\
               6 & 3 & 2 & 7 
           \end{array}
           \right)

Найти оптимальные стратегии игроков и определить цену игры.

**Решение:**

|image|

Проведем прямые :math:`b_i`, и построим ломаную линию :math:`b_1NMb_3`,
соответствующую нижней границе выигрыша. Точка N, в которой эта ломаная
достигает максимума, является пересечением прямых

(:math:`b_1`): y=1+5x и (:math:`b_2`): y=5-2x.

Вычислив координаты точки N: :math:`x_0`\ =\ :math:`\frac{4}{7}`,
:math:`y_0`\ =\ :math:`\frac{27}{7}`, получаем оптимальную стратегию
игрока А

.. math::

   S_A=\left( 
           \begin{array}{cc}
               A_1 & A_2 \\
               \frac{3}{7} & \frac{4}{7} 
           \end{array}
           \right)

и цену V=\ :math:`\frac{27}{7}`. Так как точка N является пересечением
прямых :math:`b_1` и :math:`b_2`, то полезными стратегиями игрока В
будут стратегии :math:`B_1` и :math:`B_2`. Найдем частоты их применения
:math:`q_1` и :math:`q_2`, зная, что выигрыш равен цене игры, если игрок
В применяет оптимальную стратегию, а игрок А - любую из своих полезных
стратегий, например, стратегию :math:`A_1`:

:math:`q_1`\ +5(1-\ :math:`q_1`)=V=\ :math:`\frac{27}{7}`
:math:`\Rightarrow`
:math:`q_1`\ =\ :math:`\frac{2}{7}`,\ :math:`q_2`\ =1-\ :math:`q_1`\ =\ :math:`\frac{5}{7}`.

**Ответ:**

.. math::

   S_A=\left( 
               \begin{array}{cc}
                   A_1 & A_2 \\
                   \frac{4}{7} & \frac{3}{7} 
               \end{array}
               \right);
           S_B=\left( 
               \begin{array}{cccc}
                   B_1 & B_2 & B_3 & B_4 \\
                   \frac{2}{7} & \frac{5}{7} & 0 & 0 
               \end{array}
               \right);
           V=\frac{27}{7}.

Задача коммивояжера
===================

Основные понятия теории графов
------------------------------

Многие задачи принятие решений можно решить с помощью теории графов.

Графические представления – наглядные отображения исследуемой системы
процесса или явления на плоскость: рисунки, чертежи, схемы и блок-схемы,
диаграммы, графы. На языке теории графов формируются и решаются многие
технические задачи, задачи из области экономики, социологии, менеджмента
и т.д. Графы используются для наглядного представления объектов и связи
между ними.

Пусть G - неориентированный граф. Геометрически граф можно представить
как набор вершин (точек), определенные пары которых соединены линиями.
Например, сеть дорог, соединяющих города :math:`E_1`, :math:`E_2`,
:math:`E_3`, :math:`E_4`, :math:`E_5` можно представить в виде графа
следующим образом. Города обозначены точками (вершинами), а дороги –
неориентированными линиями на Рисунке 1.

| |image|

Неориентированные линии означают наличие двустороннего движения между
соответствующей парой городов. Пересечения линий не считаются вершинами.

При изображении графа не имеет значение расположение вершин на
плоскости, кривизна и длина ребер на Рисунке 2.

| |image|

Маршрутом в G называется такая конечная или бесконечная
последовательность ребер, что каждые два соседних ребра имеют концевую
точку. Причем, одно и то же ребро Е может встречаться в маршруте
несколько раз.

Циклическим маршрутом называется такой маршрут, начальная и конечная
точки которого совпадают.

Цепью называют маршрут, в котором каждое его ребро встречается не более
одного раза; вершины в цепи могут повторяться не более одного раза.
Любой участок цепи является цепью. Нециклическая цепь является простой
цепью, если в ней никакая вершина не повторяется.

Граф называется сильно связным, если между каждой парой его вершин
:math:`E_i`,\ :math:`E_j \in E`, :math:`E_i \neq E_j`, существует путь
(:math:`E_i, E_2 ... E_m`) такой, что :math:`E_i` является начальной
вершиной пути, а :math:`E_j` - конечной.

Граф называется связным, если между парой его вершин :math:`E_j \in E`,
:math:`E_i \neq E_j` существует такая последовательность элементов (дуг
или ребер, или же и дуг, и ребер), что любая соседних элементов в этой
последовательности имеет общую вершину. Очевидно, что любой сильно
связный граф является связным. Связный неориентированный граф называется
деревом, если он не имеет циклов. В дереве любые две вершины связаны
единственной цепью.

Формулировка и некоторые свойства решений задачи коммивояжера
-------------------------------------------------------------

Коммивояжер (бродячий торговец) должен выйти из первого города, посетить
по разу в неизвестном порядке города 2,1,3...n и вернуться в первый
город. Расстояния между городами известны. В каком порядке следует
обходить города, чтобы замкнутый путь (тур) коммивояжера был кратчайшим?

Чтобы привести задачу к научному виду, введём некоторые термины. Города
перенумерованы числами Т=(1,2,3...n). Тур коммивояжера может быть описан
циклической перестановкой
t=(\ :math:`j_1`,\ :math:`j_2`,..,\ :math:`j_n`, :math:`j_1`), причём
все :math:`j_1`...\ :math:`j_n` – разные номера; повторяющийся в начале
и в конце :math:`j_1`, показывает, что перестановка зациклена.
Расстояния между парами вершин :math:`C_{ij}` образуют матрицу С. Задача
состоит в том, чтобы найти такой тур t:

L=L(t)=\ :math:`\sum_{k=1}^n C_{j_{k}j_{k+1}}`

Относительно математизированной формулировки задачи коммивояжера уместно
сделать два замечания.

#. В постановке :math:`C_{ij}` означали расстояния, поэтому они должны
   быть неотрицательными, т.е. для всех Т:

   | :math:`C_{ij}`>0, :math:`C_{ij}=\infty` (2)
   | (последнее равенство означает запрет на петли в туре),
     симметричными, т.е. для всех i,j:
   | :math:`C_{ij}`\ =\ :math:`C_{ij}` (3)
   | и удовлетворять неравенству треугольника, т.е. для всех:
   | :math:`C_{ij}`\ +\ :math:`C_{jk}`>\ :math:`C_{ik}` (4)

   В математической постановке говорится о произвольной матрице. Сделано
   это потому, что имеется много прикладных задач, которые описываются
   основной моделью, но всем условиям (2)-(4) не удовлетворяют. Особенно
   часто нарушается условие (3) (например, если :math:`C_{ij}` – не
   расстояние, а плата за проезд: часто туда билет стоит одну цену, а
   обратно – другую). Поэтому мы будем различать два варианта задачи
   коммивояжера: симметричную задачу, когда условие (3) выполнено, и
   несимметричную - в противном случае. Условия (2)-(4) по умолчанию мы
   будем считать выполненными.

#. В несимметричной задаче коммивояжера все туры
   t=(\ :math:`j_1`,\ :math:`j_2`,..,\ :math:`j_n`,\ :math:`j_1`) и
   t’=(\ :math:`j_1`,\ :math:`j_n`,..,\ :math:`j_2`,\ :math:`j_1`) имеют
   разную длину и должны учитываться оба. Разных туров очевидно (n-1)!.

   Зафиксируем на первом и последнем месте в циклической перестановке
   номер j1, а оставшиеся n-1 номеров переставим всеми (n-1)! возможными
   способами. В результате получим все несимметричные туры. Симметричных
   туров имеется в два раза меньше, т.к. каждый засчитан два раза: как t
   и как t’. Можно представить, что С состоит только из единиц и нулей.
   Тогда С можно интерпретировать, как граф, где ребро (i,j) проведено,
   если :math:`C_{ij}`\ =0 и не проведено, если :math:`C_{ij}`\ =1.
   Тогда, если существует тур длины 0, то он пройдёт по циклу, который
   включает все вершины по одному разу. Такой цикл называется
   гамильтоновым циклом. Незамкнутый гамильтонов цикл называется
   гамильтоновой цепью (гамильтоновым путём).

   В терминах теории графов симметричную задачу коммивояжера можно
   сформулировать так:

   Дана полная сеть с n вершинами, длина ребра (i,j)=:math:`C_{ij}` .
   Найти гамильтонов цикл минимальной длины. В несимметричной задаче
   коммивояжера вместо «цикл» надо говорить «контур», а вместо «ребра» -
   «дуги» или «стрелки». Некоторые прикладные задачи формулируются как
   задачи коммивояжера, но в них нужно минимизировать длину не
   гамильтонова цикла, а гамильтоновой цепи. Такие задачи называются
   незамкнутыми. Некоторые модели сводятся к задаче о нескольких
   коммивояжерах, но мы здесь их рассматривать не будем.

Метод ветвей и границ
~~~~~~~~~~~~~~~~~~~~~

Графом G называется непустое конечное множество, состоящее из двух
подмножеств V и E. Первое подмножество E (вершины) состоит из любого
множества элементов. Второе подмножество E (дуги) состоит из
упорядоченных пар элементов первого подмножества (u,v) u,v :math:`\in`
V. Если вершины u и u такие, что (u,v) u,v :math:`\in` E, то это вершины
смежные.

Маршрутом в графе G называется последовательность вершин
:math:`u_1, u_2...u_m` не обязательно попарно различных, где для любого
1\ :math:`\leq`\ i\ :math:`\leq`\ m :math:`u_{i-1}` смежно с
:math:`u_{i}`. Маршрут называется цепью, если все его ребра попарно
различны. Если :math:`u_{i}`\ =\ :math:`u_{m}` то маршрут называется
замкнутым. Замкнутая цепь называется циклом.

.. _постановка-задачи-1:

Постановка задачи
~~~~~~~~~~~~~~~~~

Коммивояжер должен объездить n городов. Для того чтобы сократить
расходы, он хочет построить такой маршрут, чтобы объездить все города
точно по одному разу и вернуться в исходный с минимумом затрат.

В терминах теории графов задачу можно сформулировать следующим образом.
Задано n вершин и матрица :math:`c_{ij}`, где :math:`c_{ij} \geq`\ 0 –
длинна (или цена) дуги (i, j),\ :math:`1\leq i, j\leq m`. Под маршрутом
коммивояжера z будем понимать цикл :math:`i_1, i_2...i_n, i_1`, точек
1,2,…,n. Таким образом, маршрут является набором дуг. Если между
городами i и j нет перехода, то в матрице ставится символ
«бесконечность». Он обязательно ставится по диагонали, что означает
запрет на возвращение в точку, через которую уже проходил маршрут
коммивояжера, длина маршрута l(z) равна сумме длин дуг, входящих в
маршрут. Пусть Z – множество всех возможных маршрутов. Начальная вершина
:math:`i_1` – фиксирована. Требуется найти маршрут :math:`z_0 \in` Z,
такой, что l(\ :math:`z_0`)= min l(z), z :math:`\in` Z.

Решение задачи
~~~~~~~~~~~~~~

Основная идея метода ветвей и границ состоит в том, что вначале строят
нижнюю границу :math:`\phi` длин множества маршрутов Z. Затем множество
маршрутов разбивается на два подмножества таким образом, чтобы первое
подмножество :math:`Z^1_{ij}` состояло из маршрутов, содержащих
некоторую дугу (i, j), а другое подмножество :math:`Z^1_{\overline{ij}}`
не содержало этой дуги. Для каждого из подмножеств определяются нижние
границы по тому же правилу, что и для первоначального множества
маршрутов. Полученные нижние границы подмножеств :math:`Z^1_{ij}` и
:math:`Z^1_{\overline{ij}}` оказываются не меньше нижней границы
множества всех маршрутов, т.е
:math:`\phi(Z) \leq \phi(Z^1_{ij})\leq \phi(Z^1_{\overline{ij}})`

Сравнивая нижние границы :math:`\phi(Z^1_{ij})` и
:math:`\phi(Z^1_{\overline{ij}})`, можно выделить то, подмножество
маршрутов, которое с большей вероятностью содержит маршрут минимальной
длины.

Затем одно из подмножеств :math:`(Z^1_{ij})` и
:math:`(Z^1_{\overline{ij}})` по аналогичному правилу разбивается на два
новых :math:`(Z^2_{ij})` и :math:`(Z^2_{\overline{ij}})` Для них снова
отыскиваются нижние границы :math:`\phi(Z^2_{ij})`, и
:math:`\phi(Z^2_{\overline{ij}})` и т.д. Процесс ветвления продолжается
до тех пор, пока не отыщется единственный маршрут. Его называют первым
рекордом. Затем просматривают оборванные ветви. Если их нижние границы
больше длины первого рекорда, то задача решена. Если же есть такие, для
которых нижние границы меньше, чем длина первого рекорда, то
подмножество с наименьшей нижней границей подвергается дальнейшему
ветвлению, пока не убеждаются, что оно не содержит лучшего маршрута.

Если же такой найдется, то анализ оборванных ветвей продолжается
относительно нового значения длины маршрута. Его называют вторым
рекордом. Процесс решения заканчивается, когда будут проанализированы
все подмножества.

Для практической реализации метода ветвей и границ применительно к
задаче коммивояжера укажем прием определения нижних границ подмножеств и
разбиения множества маршрутов на подмножества (ветвление).

Для того чтобы найти нижнюю границу воспользуемся следующим
соображением: если к элементам любого ряда матрицы задачи коммивояжера
(строке или столбцу) прибавить или вычесть из них некоторое число, то от
этого оптимальность плана не изменится. Длина же любого маршрутом
коммивояжера изменится на данную величину.

Вычтем из каждой строки число, равное минимальному элементу этой строки.
Вычтем из каждого столбца число, равное минимальному элементу этого
столбца. Полученная матрица называется приведенной по строкам и
столбцам. Сумма всех вычтенных чисел называется константой приведения.

Константу приведения следует выбирать в качестве нижней границы длины
маршрутов.

Разбиение множества маршрутов на подмножества
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Для выделения претендентов на включение во множество дуг, по которым
производится ветвление, рассмотрим в приведенной матрице все элементы,
равные нулю. Найдем степени :math:`\Theta_{ij}` нулевых элементов этой
матрицы. Степень нулевого элемента :math:`\Theta_{ij}` равна сумме
минимального элемента в строке i и минимального элемента в столбце j
(при выборе этих минимумов :math:`c_{ij}` – не учитывается). С
наибольшей вероятностью искомому маршруту принадлежат дуги с
максимальной степенью нуля.

Для получения платежной матрицы маршрутов, включающей дугу (i, j)
вычеркиваем в матрице строку i и столбец j, а чтобы не допустить
образования цикла в маршруте, заменяем элемент, замыкающий текущую
цепочку на бесконечность.

Множество маршрутов, не включающих дугу (i, j) получаем путем замены
элемента :math:`c_{ij}` на бесконечность.

Практическое применение задачи коммивояжера
-------------------------------------------

Пример решения задачи коммивояжера
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

| *Таблица 1*

.. raw:: latex

   \centering

+---------+---------+---------+---------+---------+---------+---------+
|         | A       | B       | C       | D       | E       | F       |
+=========+=========+=========+=========+=========+=========+=========+
| A       | :math:` | 26      | 42      | 15      | 29      | 25      |
|         | \infty` |         |         |         |         |         |
+---------+---------+---------+---------+---------+---------+---------+
| B       | 7       | :math:` | 16      | 1       | 30      | 25      |
|         |         | \infty` |         |         |         |         |
+---------+---------+---------+---------+---------+---------+---------+
| C       | 20      | 13      | :math:` | 35      | 5       | 0       |
|         |         |         | \infty` |         |         |         |
+---------+---------+---------+---------+---------+---------+---------+
| D       | 21      | 16      | 25      | :math:` | 18      | 18      |
|         |         |         |         | \infty` |         |         |
+---------+---------+---------+---------+---------+---------+---------+
| E       | 12      | 46      | 27      | 48      | :math:` | 5       |
|         |         |         |         |         | \infty` |         |
+---------+---------+---------+---------+---------+---------+---------+
| F       | 23      | 5       | 5       | 9       | 5       | :math:` |
|         |         |         |         |         |         | \infty` |
+---------+---------+---------+---------+---------+---------+---------+

Для удобства изложения везде ниже в платежной матрице заменим имена
городов (A, B, …, F) номерами соответствующих строк и столбцов (1, 2, …,
6).

Найдем нижнюю границу длин множества всех маршрутов. Вычтем из каждой
строки число, равное минимальному элементу этой строки, далее вычтем из
каждого столбца число, равное минимальному элементу этого столбца, и
таким образом приведем матрицу по строкам и столбцам. Минимумы по
строкам: :math:`r_1`\ =15, :math:`r_2`\ =1, :math:`r_3`\ =0,
:math:`r_4`\ =16, :math:`r_5`\ =5, :math:`r_6`\ =5.

После их вычитания по строкам получим:

| *Таблица 2*

.. raw:: latex

   \centering

+---------+---------+---------+---------+---------+---------+---------+
|         | 1       | 2       | 3       | 4       | 5       | 6       |
+=========+=========+=========+=========+=========+=========+=========+
| 1       | :math:` | 11      | 27      | 0       | 14      | 10      |
|         | \infty` |         |         |         |         |         |
+---------+---------+---------+---------+---------+---------+---------+
| 2       | 6       | :math:` | 15      | 0       | 29      | 24      |
|         |         | \infty` |         |         |         |         |
+---------+---------+---------+---------+---------+---------+---------+
| 3       | 20      | 13      | :math:` | 35      | 5       | 0       |
|         |         |         | \infty` |         |         |         |
+---------+---------+---------+---------+---------+---------+---------+
| 4       | 5       | 0       | 9       | :math:` | 2       | 2       |
|         |         |         |         | \infty` |         |         |
+---------+---------+---------+---------+---------+---------+---------+
| 5       | 7       | 41      | 22      | 43      | :math:` | 0       |
|         |         |         |         |         | \infty` |         |
+---------+---------+---------+---------+---------+---------+---------+
| 6       | 18      | 0       | 0       | 4       | 0       | :math:` |
|         |         |         |         |         |         | \infty` |
+---------+---------+---------+---------+---------+---------+---------+

Минимумы по столбцам:
:math:`h_1`\ =5,\ :math:`h_2`\ =\ :math:`h_3`\ =\ :math:`h_4`\ =\ :math:`h_5`\ =\ :math:`h_6`.

После их вычитания по столбцам получим приведенную матрицу:

| *Таблица 3*

.. raw:: latex

   \centering

+---------+---------+---------+---------+---------+---------+---------+
|         | 1       | 2       | 3       | 4       | 5       | 6       |
+=========+=========+=========+=========+=========+=========+=========+
| 1       | :math:` | 11      | 27      | 0       | 14      | 10      |
|         | \infty` |         |         |         |         |         |
+---------+---------+---------+---------+---------+---------+---------+
| 2       | 1       | :math:` | 15      | 0       | 29      | 24      |
|         |         | \infty` |         |         |         |         |
+---------+---------+---------+---------+---------+---------+---------+
| 3       | 15      | 13      | :math:` | 35      | 5       | 0       |
|         |         |         | \infty` |         |         |         |
+---------+---------+---------+---------+---------+---------+---------+
| 4       | 0       | 0       | 9       | :math:` | 2       | 2       |
|         |         |         |         | \infty` |         |         |
+---------+---------+---------+---------+---------+---------+---------+
| 5       | 2       | 41      | 22      | 43      | :math:` | 0       |
|         |         |         |         |         | \infty` |         |
+---------+---------+---------+---------+---------+---------+---------+
| 6       | 13      | 0       | 0       | 4       | 0       | :math:` |
|         |         |         |         |         |         | \infty` |
+---------+---------+---------+---------+---------+---------+---------+

Найдем нижнюю границу :math:`\phi(Z)`\ =15+1+0+16+5+5+5=47.

Для выделения претендентов на включение во множество дуг, по которым
производится ветвление, найдем степени :math:`\Theta_{ij}` нулевых
элементов этой матрицы (суммы минимумов по строке и столбцу).
:math:`\Theta_{14}`\ =10+0, :math:`\Theta_{24}`\ =1+0,
:math:`\Theta_{36}`\ =5+0, :math:`\Theta_{41}`\ =0+1,
:math:`\Theta_{42}`\ =0+0, :math:`\Theta_{56}`\ =2+0,
:math:`\Theta_{62}`\ =0+0, :math:`\Theta_{63}`\ =0+9,
:math:`\Theta_{65}`\ =0+2. Наибольшая степень :math:`\Theta_{14}` = 10.
Ветвление проводим по дуге (1, 4).

Нижняя граница для множества :math:`Z^1_{14}` остается равной 47. Для
всех маршрутов множества :math:`Z^1_{\overline{ij}}` из города A мы не
перемещаемся в город D. В матрице это обозначается выставлением в ячейку
(1, 4) знака :math:`\infty`. В этом случае выход из города A добавляет к
оценке нижней границы по крайней мере наименьший элемент первой строки.
:math:`\phi(Z^1_{\overline{ij}})`\ =47+10.

В матрице, соответствующей :math:`Z^1_{\overline{ij}}` полагаем
:math:`c_{14}=\infty`.

| *Таблица 4*

.. raw:: latex

   \centering

+---------+---------+---------+---------+---------+---------+---------+
|         | 1       | 2       | 3       | 4       | 5       | 6       |
+=========+=========+=========+=========+=========+=========+=========+
| 1       | :math:` | 11      | 27      | :math:` | 14      | 10      |
|         | \infty` |         |         | \infty` |         |         |
+---------+---------+---------+---------+---------+---------+---------+
| 2       | 1       | :math:` | 15      | 0       | 29      | 24      |
|         |         | \infty` |         |         |         |         |
+---------+---------+---------+---------+---------+---------+---------+
| 3       | 15      | 13      | :math:` | 35      | 5       | 0       |
|         |         |         | \infty` |         |         |         |
+---------+---------+---------+---------+---------+---------+---------+
| 4       | 0       | 0       | 9       | :math:` | 2       | 2       |
|         |         |         |         | \infty` |         |         |
+---------+---------+---------+---------+---------+---------+---------+
| 5       | 2       | 41      | 22      | 43      | :math:` | 0       |
|         |         |         |         |         | \infty` |         |
+---------+---------+---------+---------+---------+---------+---------+
| 6       | 13      | 0       | 0       | 4       | 0       | :math:` |
|         |         |         |         |         |         | \infty` |
+---------+---------+---------+---------+---------+---------+---------+

После проведения процедуры приведения с :math:`r_1`\ =10 получим новую
нижнюю границу 57+10=67.

В матрице, соответствующей :math:`Z^1_{14}`, вычеркиваем первую строку и
четвертый столбец и положим :math:`c_{41}=\infty`, чтобы предотвратить
появления цикла 1\ :math:`\to`\ 4\ :math:`\to`\ 1. Получим новую
платежную матрицу :math:`c^1_{ij}`:

| *Таблица 5*

.. raw:: latex

   \centering

+---+----------------+----------------+----------------+----------------+----------------+
|   | 1              | 2              | 3              | 5              | 6              |
+===+================+================+================+================+================+
| 2 | 1              | :math:`\infty` | 15             | 29             | 24             |
+---+----------------+----------------+----------------+----------------+----------------+
| 3 | 15             | 13             | :math:`\infty` | 5              | 0              |
+---+----------------+----------------+----------------+----------------+----------------+
| 4 | :math:`\infty` | 0              | 9              | 2              | 2              |
+---+----------------+----------------+----------------+----------------+----------------+
| 5 | 2              | 41             | 22             | :math:`\infty` | 0              |
+---+----------------+----------------+----------------+----------------+----------------+
| 6 | 13             | 0              | 0              | 0              | :math:`\infty` |
+---+----------------+----------------+----------------+----------------+----------------+

Для приведения надо вычесть минимум по первому столбцу: :math:`h_1`\ =1.
При этом нижняя граница станет равной 47+1=48. Сравнивая нижние границы
:math:`\phi(Z^1_{\overline{14}})`\ =67 и :math:`\phi(Z^1_{14})`\ =48<67
выделяем подмножество маршрутов :math:`Z^1_{14}`, которое с большей
вероятностью содержит маршрут минимальной длины.

Приведенная платежная матрица для :math:`\phi(Z^1_{14})`

| *Таблица 6*

.. raw:: latex

   \centering

+---+----------------+----------------+----------------+----------------+----------------+
|   | 1              | 2              | 3              | 5              | 6              |
+===+================+================+================+================+================+
| 2 | 0              | :math:`\infty` | 15             | 29             | 24             |
+---+----------------+----------------+----------------+----------------+----------------+
| 3 | 14             | 13             | :math:`\infty` | 5              | 0              |
+---+----------------+----------------+----------------+----------------+----------------+
| 4 | :math:`\infty` | 0              | 9              | 2              | 2              |
+---+----------------+----------------+----------------+----------------+----------------+
| 5 | 1              | 41             | 22             | :math:`\infty` | 0              |
+---+----------------+----------------+----------------+----------------+----------------+
| 6 | 12             | 0              | 0              | 0              | :math:`\infty` |
+---+----------------+----------------+----------------+----------------+----------------+

Далее продолжаем процесс ветвления. Найдем степени :math:`\Theta_{ij}`
нулевых элементов этой матрицы :math:`\Theta_{21}`\ =16,
:math:`\Theta_{36}`\ =5, :math:`\Theta_{42}`\ =2,
:math:`\Theta_{56}`\ =2, :math:`\Theta_{62}`\ =0,
:math:`\Theta_{63}`\ =9, :math:`\Theta_{65}`\ = 2. Наибольшая степень
:math:`\Theta_{21}`. Затем множество разбивается дуге (2, 1) на два
новых :math:`Z^2_{21}` и :math:`Z^2_{\overline{21}}`.

В матрице для :math:`Z^2_{21}` вычеркиваем строку 2 и столбец 1. дуги
(1, 4) и (2, 1) образуют связный путь (2, 1, 4), положим
:math:`c_{42}=\infty`, чтобы предотвратить появления цикла
2\ :math:`\to`\ 1\ :math:`\to`\ 4\ :math:`\to`\ 2

| *Таблица 7*

.. raw:: latex

   \centering

+---+----+------------------+----------------+----------------+
|   | 2  | 3                | 5              | 6              |
+===+====+==================+================+================+
| 3 | 13 | :math:`\infty`   | 5              | 0              |
+---+----+------------------+----------------+----------------+
| 4 | 0  | 9 :math:`\infty` | 2              | 2              |
+---+----+------------------+----------------+----------------+
| 5 | 41 | 22               | :math:`\infty` | 0              |
+---+----+------------------+----------------+----------------+
| 6 | 0  | 0                | 0              | :math:`\infty` |
+---+----+------------------+----------------+----------------+

Для приведения надо вычесть минимум по строке 4: :math:`r_4`\ =2. При
этом нижняя граница станет равной 48+2=50.

Нижняя граница для :math:`Z^2_{\overline{21}}`, полученная как на
предыдущем шаге ветвления, равна 48+16=64. Сравнивая нижние границы
:math:`\phi(Z^2_{\overline{21}})`\ = 64 и :math:`\phi(Z^2_{21})`\ =50
<64 выбираем для дальнейшего разбиения подмножество маршрутов
:math:`Z^2_{21}`.

Приведенная платежная матрица для :math:`Z^2_{21}`

| *Таблица 8*

.. raw:: latex

   \centering

+---+----+----------------+----------------+----------------+
|   | 2  | 3              | 5              | 6              |
+===+====+================+================+================+
| 3 | 13 | :math:`\infty` | 5              | 0              |
+---+----+----------------+----------------+----------------+
| 4 | 0  | 7              | 0              | 0              |
+---+----+----------------+----------------+----------------+
| 5 | 41 | 22             | :math:`\infty` | 0              |
+---+----+----------------+----------------+----------------+
| 6 | 0  | 0              | 0              | :math:`\infty` |
+---+----+----------------+----------------+----------------+

Степени :math:`\Theta_{ij}` нулевых элементов этой матрицы
:math:`\Theta_{36}`\ =5, :math:`\Theta_{35}`\ =0,
:math:`\Theta_{56}`\ =22, :math:`\Theta_{62}`\ =13,
:math:`\Theta_{63}`\ =7, :math:`\Theta_{65}`\ =0. Наибольшая степень
:math:`\Theta_{56}`. Затем множество :math:`Z^2_{21}` разбивается дуге
(2, 1) на два новых и :math:`Z^3_{\overline{56}}`.

Нижняя граница для :math:`Z^3_{\overline{56}}` равна 50+22=72. В матрице
для вычеркиваем строку 5 и столбец 6 и полагаем :math:`c_{65}=\infty`.
Получим матрицу:

| *Таблица 9*

.. raw:: latex

   \centering

+---+----------------+----------------+----------------+
|   | 2              | 3              | 5              |
+===+================+================+================+
| 3 | 13             | :math:`\infty` | 5              |
+---+----------------+----------------+----------------+
| 4 | :math:`\infty` | 7              | 0              |
+---+----------------+----------------+----------------+
| 6 | 0              | 0              | :math:`\infty` |
+---+----------------+----------------+----------------+

Для приведения надо вычесть минимум по строке 3: :math:`r_3`\ =5. При
этом нижняя граница станет равной 50+5=55. Выбираем для дальнейшего
разбиения подмножество маршрутов.

| |image|

Приведенная платежная матрица для

| *Таблица 10*

.. raw:: latex

   \centering

+---+----------------+----------------+----------------+
|   | 2              | 3              | 5              |
+===+================+================+================+
| 3 | 8              | :math:`\infty` | 5              |
+---+----------------+----------------+----------------+
| 4 | :math:`\infty` | 7              | 0              |
+---+----------------+----------------+----------------+
| 6 | 0              | 0              | :math:`\infty` |
+---+----------------+----------------+----------------+

Степени :math:`\Theta_{ij}` нулевых элементов этой матрицы
:math:`\Theta_{35}`\ = 8, :math:`\Theta_{45}`\ =7,
:math:`\Theta_{62}`\ =8, :math:`\Theta_{63}`\ =7. Выбираем
:math:`\Theta_{35}`\ =8. Разбиваем на :math:`Z^4_{35}` и
:math:`Z^4_{\overline{35}}`.

Нижняя граница для :math:`Z^4_{\overline{35}}` равна 55+8=64. В матрице
для :math:`Z^4_{35}` вычеркиваем строку 3 и столбец 5 и полагаем
:math:`c_{63}=\infty`\ =. Получим

| *Таблица 11*

.. raw:: latex

   \centering

+---+----------------+----------------+
|   | 2              | 3              |
+===+================+================+
| 4 | :math:`\infty` | 7              |
+---+----------------+----------------+
| 6 | 0              | :math:`\infty` |
+---+----------------+----------------+

Для приведения надо вычесть минимум по строке 4: :math:`r_4`\ =7. При
этом нижняя граница станет равной 55+7=62. После приведения получим

| *Таблица 12*

.. raw:: latex

   \centering

+---+----------------+----------------+
|   | 2              | 3              |
+===+================+================+
| 4 | :math:`\infty` | 0              |
+---+----------------+----------------+
| 6 | 0              | :math:`\infty` |
+---+----------------+----------------+

Из матрицы 2\ :math:`\times`\ 2 получаем два перехода с нулевой длинной:
(4, 3) и (6, 2)

| |image|

| |image|

Полученный маршрутом коммивояжера :math:`z_0`\ =(1, 4, 3, 5, 6, 2, 1)
или (A-D-C-E-F-B-A).

.. |image| image:: pictures/4.png
.. |image| image:: pictures/5.png
.. |image| image:: pictures/1.png
.. |image| image:: pictures/2.png
.. |image| image:: pictures/3.png
.. |image| image:: pictures/47.png
.. |image| image:: pictures/6.png
.. |image| image:: pictures/7.png
.. |image| image:: pictures/11.png
.. |image| image:: pictures/12.png
.. |image| image:: pictures/8.png
.. |image| image:: pictures/9.png
.. |image| image:: pictures/10.png
.. |image| image:: pictures/13.png
.. |image| image:: pictures/14.png
.. |image| image:: pictures/15.png
.. |image| image:: pictures/16.png
.. |image| image:: pictures/17.png
.. |image| image:: pictures/18.png
.. |image| image:: pictures/37.png
.. |image| image:: pictures/35.png
.. |image| image:: pictures/36.png
.. |image| image:: pictures/28.png
.. |image| image:: pictures/29.png
.. |image| image:: pictures/30.png
.. |image| image:: pictures/31.png
.. |image| image:: pictures/32.png
.. |image| image:: pictures/33.png
.. |image| image:: pictures/34.png
.. |image| image:: pictures/19.png
.. |image| image:: pictures/20.png
.. |image| image:: pictures/21.png
.. |image| image:: pictures/22.png
.. |image| image:: pictures/23.png
.. |image| image:: pictures/24.png
.. |image| image:: pictures/25.png
.. |image| image:: pictures/43.png
.. |image| image:: pictures/44.png
.. |image| image:: pictures/45.png
.. |image| image:: pictures/46.png
.. |image| image:: pictures/26.png
.. |image| image:: pictures/27.png
.. |image| image:: pictures/41.png
.. |image| image:: pictures/42.png
.. |image| image:: pictures/40.png
.. |image| image:: pictures/39.png
.. |image| image:: pictures/38.png
